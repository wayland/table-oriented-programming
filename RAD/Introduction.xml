<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../interface.xsl"?>
<page>
<filename>RAD/Introduction.xml</filename>
<content>
<h1>Overview</h1>

<p>Programming languages are nice.  But as tools, they're only the basics.  
To be effective as programmers, there are quite a number of other tools that 
speed along the development process.  </p>

<p>One thing that can be useful is to do a comparison of:</p>

<ul>
  <li>Coding Environment Tools</li>
  <li>Integrated UI Design Tools</li>
  <li>Office Suites</li>
</ul>

<h3>Comparison of Office &amp; RAD</h3>

<p>In the following, a Vista is a view of code and/or data in a widget on your screen.  
Vistas will be detailed further on.  </p>

<table>
	<tr>
		<th>Widget</th>
		<th>Office Suite</th>
		<th></th>
		<th>Code Editor</th>
		<th>UI Editor</th>
		<th>Operations Editor</th>
	</tr>
	<tr>
	  <th rowspan="3">Rich Text</th>
		<td rowspan="3">Word Processor / DTP</td>
	  <th>App</th>
		<td>Standard Code Editor</td>
		<td>Reports</td>
		<td>Maybe something a bit like Lens crossed with YAML, and tree/table editors; edits planned deployments, not currently running ones (it may do that too, but it's not the main purpose)</td>
	</tr>
	<tr>
	  <th>Documentation</th>
		<td>API Reference (both individual text, and overall big-picture layout)</td>
		<td>User references (for various target audiences) for Reports</td>
		<td>Operator Reference (including installation)</td>
	</tr>
	<tr>
	  <th>Test</th>
		<td>Unit, Integration</td>
		<td>Acceptance Tests for Reports</td>
		<td>System (capacity, performance, security, including backup/monitoring)</td>
	</tr>
	<tr>
	  <th rowspan="3">Table</th>
		<td rowspan="3">Spreadsheet</td>
	  <th>App</th>
		<td>Relation Code Editor</td>
		<td>Widget Comparison?  </td>
		<td>Tables of eg. containers or software that can be edited to change the setup</td>
	</tr>
	<tr>
	  <th>Documentation</th>
		<td>API Reference (overview of entries)</td>
		<td>User references (for various target audiences) -- overview of entries</td>
		<td>Operator Reference?</td>
	</tr>
	<tr>
	  <th>Test</th>
		<td>Unit, Integration (overview)</td>
		<td>Acceptance (overview)</td>
		<td>System (overview)</td>
	</tr>
	<tr>
	  <th rowspan="3">Drawing</th>
		<td rowspan="3">Drawing / Presentation</td>
		<th>App</th>
		<td>Dataflow Code Editor</td>
		<td>Forms</td>
		<td>"Network" diagram that will automatically generate docker-compose.yml</td>
	</tr>
	<tr>
		<th>Documentation</th>
		<td>?Integration Documentation</td>
		<td>User Reference for Forms</td>
		<td>Operator Reference?</td>
	</tr>
	<tr>
		<th>Test</th>
		<td>How does automated testing work on these?  Simulated test runs, I guess.  </td>
		<td>Acceptance Tests for Forms (Selenium)</td>
		<td>System (not sure how this works)</td>
	</tr>
	<tr>
	  <th>Ticketing</th>
		<td>Communication Tools</td>
		<th>App?</th>
		<td></td>
	</tr>
</table>

<p>In the table above:</p>
<ul>
  <li>The Documentation rows are answering the question "When documentation is entered in this tool,
    where will it end up?</li>
  <li>The Test rows above are answering the question "For the code written here, what kind of test are we
    looking at?  </li>
</ul>

<p>Documentation is an independent axis -- Tests need documentation too, 
though these are done in the ticketing system as "Testing Steps".  
A ticket can lead to code, documentation, and tests.  In particular,
the ticket is often the documentation written before the code.  Where 
possible, this material should be integrated into the Reference documentation
and the testing documentation.  Tickets might also be an independent axis.  
</p>

<p>Acceptance Critera can probably be recycled into the relevant Reference 
works.  </p>

<p>Higher-level tickets such as epics and themes might be usable for 
documentation overview.  </p>


<p>Our goals here are:</p>
<ul>
	<li>As much as possible, get the UIs to build themselves based on the Data 
		Dictionary</li>
	<li>Where necessary, let developers drag and drop components onto UIs</li>
	<li>Allow the UIs to be re-themed by front-end developers/designers, 
		probably using XSLT, CSS, and Javascript</li> 
	<li>Be independent of frontends; our UI definition should be pushable to at 
		least the following locations:</li>
	<ul>
		<li>A web page</li>
		<li>A local GUI</li>
		<li>A terminal</li>
	</ul>
</ul>


--

<h3>What can we learn from RAD IDEs?</h3>

<h4>Lessons from RAD IDEs</h4>

<p>The lesson here is easier for me to identify, probably because I've spent 
more time over the years using various RAD IDEs.  The big lesson is, in many 
cases, visual editors of various sorts make people more productive.  I think I 
can best express this by making a bullet list of the things that I think should 
be implemented in an IDE that fully supports Programming Productivity:</p>

<ul>
	<li><b><a href="RAD/Database-Design-Editor.html">Database Design 
		Editor</a></b>: Lets you visually edit the design of your database</li>
	<li><b><a href="RAD/Code-Editors.html">Code Editors</a></b></li>
	<ul>
		<li><b>Regular Code Editor:</b> These are standard; no explanation 
			needed</li>
		<li><b>Source control visual tools:</b> To reduce the time spent managing 
			the code</li>
		<li><b>Relation Code Editors:</b> In Table-Oriented Programming, both 
			code and data can be stored in tables.  Think of this as being like 
			a spreadsheet, but you can compile it.</li> 
		<li><b>Dataflow Code Editors:</b> In dataflow programming, there's a 
			diagram that represents how the data flows.  Some of the nodes in 
			the diagram have code inside them.  We should be able to edit it.  
			</li> 
	</ul>
	<li><b><a href="RAD/GUI-Editor.html">GUI Editor</a>:</b> Something that allows editing the GUI in a visual, 
		drag-and-drop manner (Forms)</li>
	<li><b><a href="RAD/Document-Editor.html">Document Editor</a>:</b> This allows people to edit a document that could 
		be made into a report.  This would be influenced by word processors, 
		and by the Notebook model (cf. Jupyter)</li>
</ul>

</content>
</page>
