<div class="blockquote">
<h2> Summary of Benefits of Good TOP </h2>

Here is a list of some of the benefits provided by
TOP that are for the most part not OOP benefits.
It may be possible to implement many of these features
using OOP, but it would be a lot of work, and subject you to the
<a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/oopbad.htm#addins">risks</a> 
that all function (method) libraries and wizards have.
Details backing this list are found above.
<p>

<ul>
<li> 6. Support for high, medium, and low formality tables.
 Other languages usually give you only one
way to deal with tables and assume tables are either large and formal, or small and featureless.
<p>
<li> 8. Field variables can be referenced easily without converting back and forth between memory variables and actual table fields. An example might be "$amount = $rate * hours" where the $ sign marks field variables ("hours" is a memory variable). Note that a "with"-like structure may make the table reference unnecessary; however, an optional table reference should be permitted. Example: "x = mytable$amount".
<p>
<li>12.
Using persistent or semi-persistent storage allows easier modulerization and testing
because one does not have to
load and run the whole shebang in order to test
the pieces. This is because ITOP applications and
components often
pass information using powerful tables instead of
fleeting memory constructs. Communications between
components can often be via tables. These tables
can exist without having all parts
active in memory. In fact, dummy tables are easy
to construct for testing. Recreating a bunch of
memory-bound OOP structures in order to test
parts can be a real pain. 
Even when the OOP parts are ready, it is 
tough to get a view of the tangled 
classes and structures in memory. Tables, on
the other hand,
are a snap to inspect during testing and
troubleshooting.
</ul>
<div class="reference">
	<i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>
