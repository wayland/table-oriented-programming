<div class="title">Merging TOP and OOP</div>

<h2>Merging TOP and OOP?</h2>

<p>The originators of Table-Oriented Programming, Tablizer/TOPMind, 
were interested in the possibility of merging TOP and OOP.  Their thought that 
<a href="https://web.archive.org/web/20121111044000/http://www.geocities.com/tablizer/merge.htm">
objects be stored in a relational format</a> have been borne out by many of the 
current uses that relational databases are put to, especially via ORMs.  </p>

<div class="blockquote">
Perhaps the best of TOP and OOP can be combined into a
very useful programming language. There are enough
similarities between the two to spark new thinking.
It is our opinion that OOP designers have been too
caught up in building structures in memory that they
neglected flexible persistent storage techniques,
among others.

<div class="reference">
        <i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<p>Their view was that this was likely impossible; their thinking in this was 
hampered by the following restrictions:</p>
<ul>
	<li>A desire that <b>everything be a table</b> (or at least, a Tablish).  
		This was 
		understandable, given that the opposing camp at the time wanted 
		everything to be an object, and <i>only</i> an object.  Some languages 
		are still like this, but Raku's model of "everything an object, but can 
		also be something else at the same time" means that we can have most of 
		the benefits of TOP whilst also retaining the benefits of OOP.</li>
	<li>Their desire, that there be an <b>automatic mapping between objects 
		and table rows</b>.  This level of integration is, while useful at times, 
		often closer than desirable.  </li>
</ul>

<p>Any objections to the merger that was dependent on either of the above 
restrictions won't be addressed (unless the restrictions above are shown 
valid).</p>

<h1>Objections Answered</h1>

<div class="blockquote">
TOP attempts to have a built-in relationship with relational systems to reduce 
or minimize data mapping.

<div class="reference">
        <i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<p>The key here is to make the relationship between the table and the relational 
system optional; if you want the automatic data mapping, then set a setting, and 
it will happen.  If not, then don't.  </p>

<p>Tablizer/TOPMind also highlighted the weaknesses of C++ and Java 
(the primary OOP languages of his time) that prevent them from properly 
supporting TOP.  These missing features were:</p>

<div class="blockquote">

<b>Ability to evaluate strings with internal functions.</b>
  This ability is crucial to
  <a href="https://web.archive.org/web/20121111044032/http://www.geocities.com/tablizer/cntrl1.htm">
Control Tables</a> and useful for
  many other purposes. Although a "side language" can be added
  to Java and C++, this approach has many limitations. For one, it
  splits your code between the regular language and the side
  language where each language has a tough time communicating
  with the other.

<div class="reference">
        <i><a href="https://web.archive.org/web/20121111044032/http://www.geocities.com/tablizer/funcs.htm">Notes on Syntax</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<p>Raku's quoting constructs include double-quoted strings which have the 
<a href="https://docs.raku.org/language/quoting#Quoting_constructs">Ability to 
evaluate strings with internal functions</a>.  It may be necessary to 
combine this with Raku's anonymous functions, found in the Blocks and Lambdas 
section of <a href="https://docs.raku.org/language/functions">Functions</a>, to 
experience the full power of Raku here.  </li>

<div class="blockquote">

<b>Adequate Context Reduction.</b> This is the ability
  to avoid redundancy in syntax that repeats itself over large
  stretches of code. Reducing this repetition not only reduces
  typing, but also makes the relevant information more visible
  to the reader, reducing reading errors.
  The "with table" example above shows an example
  of Context Reduction. You can also read about variations
  in our
  <a href="https://web.archive.org/web/20121111044032/http://www.geocities.com/tablizer/newlang.htm#context">
proposed TOP language</a>
  discussion. Note that avoiding quotes for field names is also a
  form of context reduction.

<div class="reference">
	<i><a href="https://web.archive.org/web/20121111044032/http://www.geocities.com/tablizer/funcs.htm">Notes on Syntax</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<p>One of Raku's inheritances from Perl is a great awareness of context.  The 
cited <a href="https://web.archive.org/web/20121111044032/http://www.geocities.com/tablizer/funcs.htm">
"with table" example</a> can be easily done in Raku using a 
<a href="https://docs.raku.org/language/control#given">"given" block</a> which 
basically performs the same function.</p>

<p>Having said that, one of the down sides of a multi-paradigm language is 
balancing the needs of all the paradigms; we can't quite reduce context to the 
level of avoiding quotes on field names, but we might be able get away with 
using angle-quotes as both the associative array indicator and the quotation 
marks, as per <a href="https://docs.raku.org/language/subscripts#Subscripts">
Associative Subscripting</a>.</p>

<div class="blockquote">

<b>Clause-based syntax</b>.
  Clause-based syntax is a kind of compromise between
  position-based parameters and named parameters.
  The "copy from" example above shows an example of
  clause-based syntax and discusses some of it's
  advantages. Some implementation suggestions can
  be found in our
  <a href="https://web.archive.org/web/20121111044032/http://www.geocities.com/tablizer/newlang.htm#clause">
proposed TOP language</a>
  discussion.

<div class="reference">
        <i><a href="https://web.archive.org/web/20121111044032/http://www.geocities.com/tablizer/funcs.htm">Notes on Syntax</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<p>Raku, rather than compromising between positional and named parameters, 
allows both.  If someone were really desperate to have clause-based parameters, 
it would be achievable via a Slang.  An example would be 
<a href="https://raku.land/zef:tony-o/Slang::SQL">Slang::SQL</a>, which allows 
SQL code to be embedded directly in Raku.</p>

<p>Other articles by Tablizer/TOPMind on the topic are:</p>
<ul>
	<li><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/merge.htm">Merging OOP and TOP</a></li>
	<li><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/prpats.htm">Patterns using Procedural/Relational Paradigm</a></li>
</ul>

