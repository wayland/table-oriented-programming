<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../interface.xsl"?>
<page>
<filename>TOP/Comparisons/Raku-and-xHarbour.xml</filename>
<content>

<p>This is a page which is designed to compare Raku TOP (ie. Raku with the TOP module) with xBase/xHarbour.  </p>

<style>
td {
  padding: 6pt; 
  vertical-align: top;
}
th h2, th h3 {
  margin: 0px;
}
</style>

<h2>Function Groups</h2>

<p>These categories are drawn from the <a href="https://harbour.github.io/doc/">Harbour Reference Guide</a>.  
These are just an overview; see below this table for more depth in some areas.  </p>

<table>
  <tr>
    <th>xHarbour</th>
    <th>Raku</th>
  </tr>
  <tr><th colspan="2"><h3>Types</h3></th></tr>
  <tr>
    <td>Array</td>
    <td>See below under Types</td>
  </tr>
  <tr>
    <td>Hash Table</td>
    <td>See below under Complex Types</td>
  </tr>
  <tr>
    <td>Conversion</td>
    <td><a href="https://docs.raku.org/language/typesystem#Coercion">Coercion</a></td>
  </tr>
  <tr>
    <td>Strings</td>
    <td>See below under Types</td>
  </tr>
  <tr><th colspan="2"><h3>Classes and Objects</h3></th></tr>
  <tr>
    <td>Class</td>
    <td><a href="https://docs.raku.org/language/classtut">Classes and Objects</a></td>
  </tr>
  <tr>
    <td>Objects</td>
    <td><a href="https://docs.raku.org/language/classtut">Classes and Objects</a></td>
  </tr>
  <tr>
    <td>Variable Management</td>
    <td><a href="https://docs.raku.org/language/classtut">Classes and Objects</a> and 
      <a href="https://docs.raku.org/language/variables">Variables</a></td>
  </tr>
  <tr><th colspan="2"><h3>Table-Oriented Programming</h3></th></tr>
  <tr>
    <td>Database</td>
    <td>See below under Table/Database-Related Functions</td>
  </tr>
  <tr>
    <td>RDD</td>
    <td>Will be done as backends to Raku TOP</td>
  </tr>
  <tr><th colspan="2"><h3>UI/RAD</h3></th></tr>
  <tr>
    <td></td>
    <td>The items below will all need to be implemented in Rococo, the Raku Code Office.  </td>
  </tr>
  <tr>
    <td>Events (Keyboard only; see below for others)</td>
    <td></td>
  </tr>
  <tr>
    <td>Language and Nation</td>
    <td>Requires addons.  See <a href="https://raku.land/tags/i18n">I18N</a> for a list of available addons</td>
  </tr>
  <tr>
    <td>Printer</td>
    <td></td>
  </tr>
  <tr>
    <td>Switch &amp; State Functions, Keyboard/Mouse, Menus/Prompts, </td>
    <td></td>
  </tr>
  <tr>
    <td>Terminal</td>
    <td></td>
  </tr>
  <tr>
    <td>User Interface</td>
    <td></td>
  </tr>
  <tr>
    <td>Video Functions, Video</td>
    <td></td>
  </tr>

  <tr><th colspan="3"><h3>Other</h3></th></tr>
  <tr>
    <td>Application</td>
    <td>(Has the features, but scattered across the documentation)</td>
  </tr>
  <tr>
    <td>Date/Time</td>
    <td><a href="https://docs.raku.org/language/temporal">Date and Time Functions</a></td>
  </tr>
  <tr>
    <td>Environment</td>
    <td>Various, including:
      <ul>
        <li><a href="https://docs.raku.org/type/Thread#method_run">run</a> and 
          <a href="https://docs.raku.org/type/Proc#method_shell">shell</a></li>
        <li><a href="https://docs.raku.org/language/variables#%*ENV">%*ENV</a></li>
      </ul>
    </td>
  </tr>
  <tr>
    <td>Error</td>
    <td><a href="https://docs.raku.org/language/exceptions">Exceptions</a></td>
  </tr>
  <tr>
    <td>Events (except Keyboard; see above for those)</td>
    <td>(Has the features, but scattered across the documentation)</td>
  </tr>
  <tr>
    <td>Execute and Execution</td>
    <td>See both <a href="https://docs.raku.org/language/experimental#macros">macros</a> and 
      <a href="https://docs.raku.org/type/independent-routines#routine_EVAL">EVAL</a></td>
  </tr>
  <tr>
    <td>FileSys</td>
    <td>Mostly <a href="https://docs.raku.org/type/IO/Path">IO::Path</a></td>
  </tr>
  <tr>
    <td>Garbage Collector</td>
    <td>Mostly happens under the hood</td>
  </tr>
  <tr>
    <td>Idle States</td>
    <td>Not quite the same, but see <a href="https://docs.raku.org/language/concurrency">Concurrency</a></td>
  </tr>
  <tr>
    <td>Internal</td>
    <td>(Has the features, except maybe the keyboard ones, but scattered across the documentation)</td>
  </tr>
  <tr>
    <td>INET</td>
    <td>cf. <a href="https://docs.raku.org/type/IO/Socket/Async">IO::Socket::Async</a></td>
  </tr>
  <tr>
    <td>Macro</td>
    <td>Not relevant</td>
  </tr>
  <tr>
    <td>Math</td>
    <td>cf. <a href="https://docs.raku.org/language/math">Math</a> and 
      <a href="https://docs.raku.org/language/operators">Operators</a></td>
  </tr>
  <tr>
    <td>Zip Functions</td>
    <td>External library: <a href="https://raku.land/github:azawawi/File::Zip">File::Zip</a></td>
  </tr>
</table>

<h1>In-Depth Basic Features</h1>

<table>
  <tr>
    <th>Item</th>
    <th>xHarbour</th>
    <th>Raku TOP</th>
  </tr>
  <tr><th colspan="3"><h2>Types</h2></th></tr>
  <tr><th colspan="3">Scalar Types</th></tr>
  <tr><td colspan="3">Raku has one generic Scalar type, but with its Gradual Typing, it's possible to define more confined scalars, including the following</td></tr>
  <tr>
    <td>Number</td>
    <td>Number</td>
    <td>A variety of <a href="https://docs.raku.org/language/numerics">Numeric</a> types</td>
  </tr>
  <tr>
    <td>String</td>
    <td><a href="https://harbour.github.io/doc/#coremiapimistrings">String API</a></td>
    <td><a href="https://docs.raku.org/type/Str">Str</a>ing</td>
  </tr>
  <tr>
    <td>Boolean</td>
    <td>Logical</td>
    <td><a href="https://docs.raku.org/type/Bool">Bool</a></td>
  </tr>
  <tr>
    <td>Date/Time</td>
    <td><a href="https://harbour.github.io/doc/#coremiapimidatesltime">Date/Time API</a></td>
    <td>A selection of <a href="https://docs.raku.org/language/temporal">Date and Time</a> types</td>
  </tr>
  <tr>
    <td>Nil</td>
    <td>Nil</td>
    <td><a href="https://docs.raku.org/type/Nil">Nil</a></td>
  </tr>
  <tr><th colspan="3">Complex Types</th></tr>
  <tr>
    <td>Positional types</td>
    <td><a href="https://harbour.github.io/doc/#coremiapimiarray">Array API</a></td>
    <td>A variety of <a href="https://docs.raku.org/language/list">Array-related types</a></td>
  </tr>
  <tr>
    <td>Associative</td>
    <td><a href="https://harbour.github.io/doc/#coremiapimihash-table">Hash API</a></td>
    <td>A variety of <a href="https://docs.raku.org/language/hashmap">Hash-related types</a></td>
  </tr>
  <tr>
    <td>Function variables</td>
    <td>CodeBlock</td>
    <td>A variety of <a href="https://docs.raku.org/language/functions">Function</a> types, some of which can be assigned to variables</td>
  </tr>
  <tr><th colspan="3"><h2>Control Structures</h2></th></tr>
  <tr>
    <td>Sources</td>
    <td></td>
    <td><a href="https://docs.raku.org/language/control">Control Flow</a>.  The pieces of code should be roughly equivalent</td>
  </tr>
  <tr><th colspan="3">Control Structures: Control Flow Breaking</th></tr>
  <tr>
    <td></td>
    <td></td>
    <td>Any of these can be passed an ancestor block label (see below for block labels); if so, they apply to the named block, not the immediate ancestor block.</td>
  </tr>  
  <tr>
    <td>Next loop iteration</td>
    <td><code>LOOP</code></td>
    <td><code>next</code></td>
  </tr>
  <tr>
    <td>Exit the block (loop or other)</td>
    <td><code>EXIT</code></td>
    <td><code>last</code></td>
  </tr>
  <tr>
    <td>Redo the current loop iteration (without re-evaluating the conditional)</td>
    <td></td>
    <td><code>redo</code></td>
  </tr>
  <tr><th colspan="3">Control Structures: Loops</th></tr>
  <tr>
    <td>While Loops</td>
    <td>
<code>[DO] WHILE &lt;conditional expression&gt;
...
END[DO]</code>
    </td>
    <td>
<code>while (&lt;conditional expression&gt;) {
  ...
}</code>
    </td>
  </tr>
  <tr>
    <td>For Loop</td>
    <td>
<code>FOR &lt;var&gt; := &lt;initial expression&gt; TO &lt;terminating condition&gt; 
    [STEP &lt;step expression&gt;]
   ...
NEXT</code>
    </td>
    <td>
<code>loop (my $var = &lt;initial expression&gt;; $var &lt;= &lt;terminating condition&gt;; 
      $var += &lt;step expression&gt;) {
    ...
}</code>
    </td>
  </tr>
  <tr>
    <td>For Each Loop</td>
    <td>
<code>FOR EACH &lt;item&gt; IN &lt;array&gt;
    ...
NEXT</code>
    </td>
    <td>
<code>for @array {
    ...
}</code>
    </td>
  </tr>
  <tr><th colspan="3">Control Structures: Conditionals</th></tr>
  <tr>
    <td>Switch-type</td>
    <td>
<code>SWITCH &lt;SwitchExp&gt;
   CASE &lt;LiteralExp&gt;
      ...
      [EXIT]
    ...
    [DEFAULT]
    ...
END</code>
    </td>
    <td>
<code>given &lt;SwitchExp&gt; {
    when &lt;LiteralExp&gt; {
      ...
    }
    default {
      ...
    }
}</code>
    </td>
  </tr>
  <tr>
    <td>Multi-conditional case</td>
    <td>
<code>DO CASE
   CASE &lt;conditional expression&gt;
      ...
   [CASE &lt;conditional expression&gt;]
      ...
   [OTHERWISE]
      ...
END[CASE ]</code>
    </td>
    <td>
<code>LABEL: {
    when &lt;conditional expression&gt; {
      ...
    };
    ...
    default {
      ...
    }
}</code>
      <p>The LABEL could be any text (with some exceptions, but most things).  Any block can be given a label.  The "next" and "last" constructs can be passed a label, and they'll act on the labelled block (so you can next/last on an outside loop while in an inner loop).  </p>
    </td>
  </tr>
  <tr><th colspan="3">Control Structures: Exception Handling, etc</th></tr>
  <tr>
    <td>Sources</td>
    <td></td>
    <td><a href="https://docs.raku.org/language/phasers">Phasers</a> and <a href="https://docs.raku.org/language/exceptions#Catching_exceptions">Exceptions</a></td>
  </tr>
  <tr>
    <td>Try, catch, finally</td>
    <td>
<code>TRY
   ...
   [BREAK]
   [Break([Exp])]
   [Throw([Exp])]
CATCH [Var]
   ...
FINALLY
   ...
END</code>
      <p>Either CATCH or FINALLY (or both) must be present.  </p>
    </td>
    <td>
<code>try {
    ...
    die;
    die &lt;Exception&gt;;
    Exception.new.throw;
    CATCH {
      when &lt;Expression&gt; {
        ...
      }
    }
    POST {
      ...
    }
}</code>
    </td>
  </tr>
  <tr>
    <td>Sequence</td>
    <td>BEGIN SEQUENCE...</td>
    <td>No direct equivalent.  The nearest equivalent would be to use try/throw/catch.  I've been unable to find any documentation on what RECOVER does.  Raku supports resuming exceptions; to get the equivalent of a retry, it'd probably 
      be necessary to wrap the whole thing in a loop; if this were done, the redo command mentioned above could be used.  </td>
  </tr>
  <tr><th colspan="3">Control Structures: Topicalisers</th></tr>
  <tr>
    <td>Basic topicaliser</td>
    <td><code>USE &lt;database&gt;</code></td>
    <td><code>given &lt;expression&gt; {...}</code></td>
  </tr>
  <tr><th colspan="3"><h2>Subroutines</h2></th></tr>
  <tr>
    <td>Regular Subroutines</td>
    <td><code>PROCEDURE</code> (no return values) and <code>FUNCTION</code> (returns one value)</td>
    <td>Has <code>sub</code>, which can return any number of values, and, if <code>return</code> isn't called, will just return the return value of the last statement (which can be ignored).  </td>
  </tr>
  <tr>
    <td>Methods</td>
    <td><code>METHOD</code></td>
    <td><code>method</code></td>
  </tr>
  <tr>
    <td>INIT/END and other phasers</td>
    <td><code>INIT</code> (at program start) and <code>END</code> (at program exit)</td>
    <td>A variety of <a href="https://docs.raku.org/language/phasers">phasers</a>, including <code>INIT</code> and <code>END</code></td>
  </tr>
  <tr><th colspan="3"><h2>Macros</h2></th></tr>
  <tr>
    <td>Eval/Macros</td>
    <td>&amp;(...)</td>
    <td><code>EVAL "...";</code> -- but see also <a href="https://docs.raku.org/syntax/macros">macros</a></td>
  </tr>
  <tr><th colspan="3"><h2>Database Support</h2></th></tr>
  <tr>
    <td></td>
    <td></td>
    <td>These features are only available through libraries.  The ones marked "Not implemented yet" are the ones that I'm hoping to implement as the next round of Raku TOP.  </td>
  </tr>
  <tr>
    <td>In-language support</td>
    <td>DBF, DBFNTX, DBFCDX, DBFDBT, and DBFFPT</td>
    <td><a href="https://raku.land/zef:tony-o/Slang::SQL">Slang::SQL</a> (kind of) <div class="not-implemented">CSV, PostgreSQL</div></td>
  </tr>
  <tr>
    <td>Remote support</td>
    <td>ODBC/ADO (I assume these are remote; haven't looked closely)</td>
    <td><a href="https://github.com/raku-community-modules/DBIish">DBIish</a></td>
  </tr>
</table>

<h1>Table/Database-Related Functions</h1>

<p>Where xHarbour uses the word "database", Raku (in line with SQL) will be using the word "table".  </p>

<table>
  <tr>
    <th>Item</th>
    <th>xHarbour</th>
    <th>PostgreSQL</th>
    <th>Raku TOP</th>
  </tr>
  <tr><th colspan="4"><h2>TOP::Core Functions</h2></th></tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td>When called on a database, these functions are similar to xHarbour db*All, except that this only closes 
      tables/cursors on this database, not all tables/cursors.  If we can eliminate these functions by making them 
      happen automatically, so much the better.  </td>
  </tr>
  <tr>
    <td></td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#dbcommit">dbCommit()</a>
<a href="https://harbour.github.io/doc/harbour.html#dbcommitall">dbCommitAll()</a></code></td>
    <td></td>
    <td class="not-implemented"><code>.commit()</code></td>
  </tr>
  <tr>
    <td></td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#dbcloseall">dbCloseAll</a>
<a href="https://harbour.github.io/doc/harbour.html#dbclosearea">dbCloseArea</a></code></td>
    <td></td>
    <td class="not-implemented"><code>.close()</code></td>
  </tr>
  <tr>
    <td>Get name of current item</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#alias">Alias</a>
<a href="https://harbour.github.io/doc/harbour.html#dbf">Dbf</a></code></td>
    <td></td>
    <td class="not-implemented"><code>.name()</code></td>
  </tr>
  
  <tr><th colspan="4"><h2>Cursor-based Functions</h2></th></tr>
  
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td>The following Raku examples assume that <code>given $cursor {...}</code> is wrapped around them.  Also useful
      for consideration is <a href="https://docs.raku.org/type/IO/Handle">IO::Handle</a>, especially the section on
      creating custom handles</td>
  </tr>
  <tr><th colspan="4"><h3>Positional Movement</h3></th></tr>
  <tr>
    <td>Relative cursor moves</td>
    <td><code>
<a href="https://harbour.github.io/doc/harbour.html#dbskip">dbSkip</a>(&lt;count&gt;)
<a href="https://harbour.github.io/doc/harbour.html#dbskip">dbSkip</a>(1)
<a href="https://harbour.github.io/doc/harbour.html#dbskip">dbSkip</a>(-1)
<a href="https://harbour.github.io/doc/harbour.html#dbskip">dbSkip</a>(2)
<a href="https://harbour.github.io/doc/harbour.html#dbskip">dbSkip</a>(-2)</code></td>
    <td><code>
<a href="https://www.postgresql.org/docs/current/plpgsql-cursors.html#PLPGSQL-CURSOR-USING-MOVE">MOVE</a> RELATIVE &lt;count&gt; FROM &lt;cursor&gt;
<a href="https://www.postgresql.org/docs/current/plpgsql-cursors.html#PLPGSQL-CURSOR-USING-MOVE">MOVE</a> NEXT FROM &lt;cursor&gt;
<a href="https://www.postgresql.org/docs/current/plpgsql-cursors.html#PLPGSQL-CURSOR-USING-MOVE">MOVE</a> PRIOR FROM &lt;cursor&gt;
<a href="https://www.postgresql.org/docs/current/plpgsql-cursors.html#PLPGSQL-CURSOR-USING-MOVE">MOVE</a> FORWARD 2 FROM &lt;cursor&gt;
<a href="https://www.postgresql.org/docs/current/plpgsql-cursors.html#PLPGSQL-CURSOR-USING-MOVE">MOVE</a> BACKWARD 2 FROM &lt;cursor&gt;</code></td>
    <td class="not-implemented"><code>.moveRel(&lt;count&gt;)
$cursor++
$cursor--
.moveRel(2)
.moveRel(-2)</code></td>
  </tr>
  <tr>
    <td>Go to numbered record</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#dbgobottom">dbGoto</a>(&lt;count&gt;)</code></td>
    <td><code><a href="https://www.postgresql.org/docs/current/plpgsql-cursors.html#PLPGSQL-CURSOR-USING-MOVE">MOVE</a> ABSOLUTE &lt;count&gt; IN &lt;cursor&gt;</code></td>
    <td class="not-implemented"><code>.moveAbs(&lt;count&gt;)</code></td>
  </tr>
  <tr>
    <td>Go to first record</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#dbgotop">dbGoTop</a></code></td>
    <td><code><a href="https://www.postgresql.org/docs/current/plpgsql-cursors.html#PLPGSQL-CURSOR-USING-MOVE">MOVE</a> FIRST IN &lt;cursor&gt;</code></td>
    <td class="not-implemented"><code>.moveAbs(:first)</code></td>
  </tr>
  <tr>
    <td>Go to last record</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#dbgobottom">dbGoBottom</a></code></td>
    <td><code><a href="https://www.postgresql.org/docs/current/plpgsql-cursors.html#PLPGSQL-CURSOR-USING-MOVE">MOVE</a> LAST IN &lt;cursor&gt;</code></td>
    <td class="not-implemented"><code>.moveAbs(:last)</code></td>
  </tr>
  <tr>
    <td></td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#recno">RecNo</a></code></td>
    <td></td>
    <td class="not-implemented"><code>.current :as('Number')</code></td>
  </tr>
  <tr><th colspan="4"><h3>Seeking Movement</h3></th></tr>
  <tr>
    <td>Seek a record</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#dbseek">dbSeek</a></code></td>
    <td></td>
    <td class="not-implemented"><code>.match() :first</code></td>
  </tr>
  <tr>
    <td>Check if a record was found</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#found">Found</a></code></td>
    <td></td>
    <td class="not-implemented"><code>.marked :found</code></td>
  </tr>
  <tr><th colspan="4"><h3>Other</h3></th></tr>
  <tr>
    <td></td>
    <td></td>
    <td>OPEN/CLOSE</td>
    <td class="not-implemented">Basically equivalent to create/destroy</td>
  </tr>  
  <tr>
    <td></td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#bof">Bof()</a>
<a href="https://harbour.github.io/doc/harbour.html#eof">Eof()</a></code></td>
    <td></td>
    <td class="not-implemented"><code>.is :first
.is :last</code></td>
  </tr>
  <tr><th colspan="4"><h3>Deletion marking</h3></th></tr>
  <tr>
    <td>Mark current record for deletion</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#dbdelete">dbDelete</a></code></td>
    <td><code><a href="https://www.postgresql.org/docs/current/plpgsql-cursors.html#PLPGSQL-CURSOR-USING-UPDATE-DELETE">DELETE WHERE CURRENT OF &lt;cursor&gt;</a></code>
      <p>Doesn't mark, just does the deletion</p></td>
    <td class="not-implemented"><code>.mark :delete</code><p>Read dbRecall before implementing</p></td>
  </tr>
  <tr>
    <td>Check if current record is marked for deletion</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#deleted">Deleted</a></code></td>
    <td></td>
    <td class="not-implemented"><code>.marked :delete</code><p>Read dbRecall before implementing</p></td>
  </tr>
  <tr>
    <td>Unmark current record for deletion</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#dbrecall">dbRecall</a></code></td>
    <td>-</td>
    <td class="not-implemented"><code>.unmark :delete</code></td>
  </tr>
  <tr>
    <td>Delete records marked for deletion</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#pack-cmd">PACK</a></code></td>
    <td></td>
    <td class="not-implemented"><code>.delete_marked()</code></td>
  </tr>
  <tr><th colspan="4"><h3>Getting/setting fields</h3></th></tr>
  <tr>
    <td>Get field value</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#fieldget">FieldGet</a></code></td>
    <td><code><a href="https://www.postgresql.org/docs/current/plpgsql-cursors.html#PLPGSQL-CURSOR-USING-FETCH">FETCH</a> [NEXT, PRIOR, FIRST, LAST,
    ABSOLUTE count, RELATIVE count, 
    FORWARD, or BACKWARD]</code><p>This actually fetches into the array, not fetches the field</p></td>
    <td class="not-implemented"><code>$value = .{&lt;field name&gt;}</code></td>
  </tr>
  <tr>
    <td>Put value in field</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#fieldput">FieldPut</a></code></td>
    <td><code><a href="https://www.postgresql.org/docs/current/plpgsql-cursors.html#PLPGSQL-CURSOR-USING-UPDATE-DELETE">UPDATE</a> WHERE CURRENT OF &lt;cursor&gt;</code></td>
    <td class="not-implemented"><code>.{&lt;field name&gt;} = $value</code></td>
  </tr>
  
  <tr><th colspan="4"><h2>Relation Functions</h2></th></tr>
  
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td>The following Raku examples assume that <code>given $relation {...}</code> is wrapped around them.  .  </td>
  </tr>
  <tr>
    <td></td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#dbappend">dbAppend</a>(&lt;lock&gt;)</code></td>
    <td><code><a href="https://www.postgresql.org/docs/current/sql-insert.html">INSERT</a></code></td>
    <td class="not-implemented"><code>.upsert({&lt;field&gt; => $value, ...})</code></td>
  </tr>
  <tr>
    <td>Return the data dictionary entries for a table structure (a data dictionary is just another table)</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#__dbstructfilter">__dbStructFilter</a>
<a href="https://harbour.github.io/doc/harbour.html#__fledit">__FLedit</a>
<a href="https://harbour.github.io/doc/harbour.html#dbstruct">dbStruct</a></code></td>
    <td></td>
    <td class="not-implemented"><code>.dictionary(fields => [...])</code></td>
  </tr>
  <tr>
    <td></td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#lupdate">LUpdate</a></code></td>
    <td></td>
    <td class="not-implemented">.updated :as('date')</td>
  </tr>
  <tr><th colspan="4"><h3>Counting</h3></th></tr>
  <tr>
    <td>Count fields</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#fcount">FCount</a></code></td>
    <td></td>
    <td class="not-implemented"><code>.count_columns()</code></td>
  </tr>
  <tr>
    <td>Count Rows</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#lastrec">LastRec</a>
<a href="https://harbour.github.io/doc/harbour.html#reccount">RecCount</a></code></td>
    <td></td>
    <td class="not-implemented"><code>.count_rows()</code></td>
  </tr>

  <tr><th colspan="4"><h2>Table Functions</h2></th></tr>

  <tr><th colspan="4"><h3>Locking</h3></th></tr>
  <tr>
    <td>Lock rows</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#dbrlock">dbRLock</a>
<a href="https://harbour.github.io/doc/harbour.html#flock">FLock</a>
<a href="https://harbour.github.io/doc/harbour.html#rlock">RLock</a></code></td>
    <td><code><a href="https://www.postgresql.org/docs/current/sql-lock.html">LOCK</a> [ TABLE ] [ ONLY ] name [ * ] [, ...] 
    [ IN lockmode MODE ] [ NOWAIT ]</code>
      <p>cf. <a href="https://www.postgresql.org/docs/current/explicit-locking.html#LOCKING-ROWS">Row-level locks</a></p></td>
    <td class="not-implemented"><code>.lock([ &lt;primary key&gt; ])</code></td>
  </tr>
  <tr>
    <td>Unlock rows</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#dbrunlock">dbRUnlock</a>
<a href="https://harbour.github.io/doc/harbour.html#dbunlock">dbUnlock</a>
<a href="https://harbour.github.io/doc/harbour.html#dbunlockall">dbUnlockAll</a></code></td>
    <td>There's no Unlock command; locks are released at transaction end</td>
    <td class="not-implemented">Maybe as per Postgres?</td>
  </tr>
  <tr><th colspan="4"><h3>Other Table Functions</h3></th></tr>
  <tr>
    <td>Truncate</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#zap-cmd">ZAP</a></code></td>
    <td><code><a href="https://www.postgresql.org/docs/current/sql-truncate.html">TRUNCATE</a></code></td>
    <td class="not-implemented"><code>$table = Empty;</code></td>
  </tr>

  <tr><th colspan="4"><h2>View Functions</h2></th></tr>
  
  <tr>
    <td>Filtering rows</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#dbfilter">dbFilter</a>
<a href="https://harbour.github.io/doc/harbour.html#dbsetfilter">dbSetFilter</a></code></td>
    <td><code><a href="https://www.postgresql.org/docs/current/sql-createview.html">CREATE VIEW</a> ... WHERE ...</code></td>
    <td class="not-implemented"><code>$view = $database.ensure(type => view, where => {...}, ...);
$view = View.new(where => {...}, ...);</code></td>
  </tr>
  <tr>
    <td>Ordering Rows</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#ordcondset">ordCondSet</a></code></td>
    <td><code><a href="https://www.postgresql.org/docs/current/sql-createview.html">CREATE VIEW</a> ... ORDER BY ...</code></td>
    <td class="not-implemented"><code>$view = $database.ensure(type => view, sort => {...}, ...);
$view = View.new(sort => {...}, ...);</code></td>
  </tr>
  <tr>
    <td></td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#ordcreate">ordCreate</a>
<a href="https://harbour.github.io/doc/harbour.html#orddestroy">ordDestroy</a></code></td>
    <td></td>
    <td class="not-implemented">If relevant, happens automatically on view object creation/destruction</td>
  </tr>
  <tr>
    <td></td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#ordkey">ordKey</a></code></td>
    <td></td>
    <td class="not-implemented">Does this need implementing?  It seems like in our context, it would get part of a
      WHERE clause from a view</td>
  </tr>
  <tr>
    <td>Create delimited text file from table</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#__dbdelim">__dbDelim</a>(
  &lt;lExport&gt;, &lt;xcFile&gt;,
  [&lt;xcDelim&gt;], [&lt;aFields&gt;],
  [&lt;bFor&gt;], [&lt;bWhile&gt;],
  [&lt;nNext&gt;], [&lt;nRecord&gt;],
  &lt;lRest&gt;
)
<a href="https://harbour.github.io/doc/harbour.html#__dbsdf">__dbSDF</a>(...)</code></td>
    <td><code><a href="https://www.postgresql.org/docs/current/sql-copy.html">COPY</a> table_name [ ( column_name [, ...] ) ]
    FROM { 'filename' | PROGRAM 'command' | STDIN }
    [ [ WITH ] ( option [, ...] ) ]
    [ WHERE condition ]</code>
    </td>
    <td class="not-implemented"><code>$csvtable = Table.new(
  type => 'csv',
  filename => $xcFile,
  delimiter => $xcDelim,
);
if($lExport) {
  $csvtable.upsert($_)
} else {
  .upsert($csvtable);
}
  </code>
  <p>For bFor, bWhile, nNext, and lRest, just use a loop or record selection.  <code>.upsert</code> should take 
    a relation or a cursor, or an array of table rows, such as might be returned by a query.  
    As an optional parameter, it should also take a field map 
    (hash converting keys into other keys).  </p></td>
  </tr>
  
  <tr><th colspan="4"><h2>Database Functions</h2></th></tr>
  
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td>The following Raku examples assume that <code>given $database {...}</code> is wrapped around them.</td>
  </tr>
  <tr>
    <td>Create a new table, maybe based on current table structure</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#__dbcopystruct">__dbCopyStruct</a>
<a href="https://harbour.github.io/doc/harbour.html#__dbcopyxstruct">__dbCopyXStruct</a>
<a href="https://harbour.github.io/doc/harbour.html#__dbcreate">__dbCreate</a>
<a href="https://harbour.github.io/doc/harbour.html#dbcreate">dbCreate</a>
<a href="https://harbour.github.io/doc/harbour.html#copy-structure-cmd">COPY STRUCTURE</a>
<a href="https://harbour.github.io/doc/harbour.html#copy-structure-extended-cmd">COPY STRUCTURE EXTENDED</a>
<a href="https://harbour.github.io/doc/harbour.html#create-cmd">CREATE</a>
<a href="https://harbour.github.io/doc/harbour.html#create-from-cmd">CREATE FROM</a></code></td>
    <td><code><a href="https://www.postgresql.org/docs/16/sql-createtableas.html">CREATE TABLE AS</a></code></td>
    <td class="not-implemented"><code>.ensure_table(structure => $relation.dictionary(fields => [...]))
$table = Table.new(...)</code></td>
  </tr>
  <tr>
    <td>Get list of locks</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#dbrlocklist">dbRLockList</a></code></td>
    <td>Use <a href="https://www.postgresql.org/docs/current/view-pg-locks.html">pg_locks</a></td>
    <td class="not-implemented"><code>$database.locks()</code><p>Note that this is only locks on the current database</p></td>
  </tr>
  <tr>
    <td></td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#used">Used</a></code></td>
    <td></td>
    <td class="not-implemented">Not quite the same, but we should have <code>.used($relation-name)</code>, which 
      returns null if the named relation is not in use, and returns the relation if it is</td>
  </tr>
  <tr><th colspan="4"><h2>Other Functions</h2></th></tr>
  <tr>
    <td></td>
    <td>dbClearFilter</td>
    <td></td>
    <td>Won't be implemented; filters are applied by creating a view on a table, and clearing the filter doesn't make sense in this context</td>
  </tr>
  <tr>
    <td></td>
    <td>AFields</td>
    <td></td>
    <td>Just use regular Raku functionality (or $table.select)</td>
  </tr>
  <tr>
    <td></td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#dbselectarea">dbSelectArea</a>
<a href="https://harbour.github.io/doc/harbour.html#dbusearea">dbUseArea</a>
<a href="https://harbour.github.io/doc/harbour.html#select">Select</a></code></td>
    <td></td>
    <td><code>given $relation {...}</code></td>
  </tr>
  <tr>
    <td></td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#dbsetdriver">dbSetDriver</a></code></td>
    <td></td>
    <td>Drivers will be set when creating a table/view (often via a Database object)</td>
  </tr>
  <tr>
    <td></td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#fieldname">FieldName</a>
<a href="https://harbour.github.io/doc/harbour.html#fieldpos">FieldPos</a>
<a href="https://harbour.github.io/doc/harbour.html#ordbagname">ordBagName</a>
<a href="https://harbour.github.io/doc/harbour.html#ordfor">ordFor</a></code></td>
    <td></td>
    <td>We don't support positional referencing of fields -- use the name, not the position (for fields, not rows -- rows are indexed by number)</td>
  </tr>
  <tr>
    <td></td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#header">Header</a></code></td>
    <td></td>
    <td>This should be an internal function on the various DB backends, not a user-exposed function</td>
  </tr>
  <tr>
    <td></td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#indexext">IndexExt</a>
<a href="https://harbour.github.io/doc/harbour.html#indexkey">IndexKey</a>
<a href="https://harbour.github.io/doc/harbour.html#indexord">IndexOrd</a>
<a href="https://harbour.github.io/doc/harbour.html#ordbagext">ordBagExt</a></code></td>
    <td></td>
    <td>Should be an internal function on the various DB backends, not a user-exposed function</td>
  </tr>
  <tr>
    <td></td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#neterr">NetErr</a>
<a href="https://harbour.github.io/doc/harbour.html#recsize">RecSize</a></code></td>
    <td></td>
    <td>Should be an internal function on the various DB backends, not a user-exposed function</td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td class="not-implemented"></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td class="not-implemented"></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td class="not-implemented"></td>
  </tr>
</table>

<h1>UI-related features</h1>

<table>
  <tr>
    <th>Item</th>
    <th>xHarbour</th>
    <th>OpenOffice</th>
    <th>HTML</th>
    <th>Rococo</th>
  </tr>
  <tr><th colspan="5"><h3>User Interface and Widgets</h3></th></tr>
  <tr>
    <td>Menubar, Menu, MenuItem</td>
    <td>_AtPrompt, MENU TO</td>
    <td></td>
    <td></td>
    <td>Everything in this section should be in Rococo's GUI Editor</td>
  </tr>
  <tr>
    <td>ListBox, Select/Dropdown</td>
    <td>AChoice</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>Dialog Box</td>
    <td>Alert</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>Table Editor; cf. also Table Output Reports, belo</td>
    <td>Browse, dbEdit</td>
    <td>Mainly LibreOffice Calc, but Writer forms might have a table widget</td>
    <td>HTML table</td>
    <td></td>
  </tr>
  <tr>
    <td>Window</td>
    <td>MaxRow(), MaxCol(), Row(), Col()</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr><th colspan="5"><h3>Events</h3></th></tr>
  <tr>
    <td>KeyEvent</td>
    <td>SetKey, hb_SetKey(Check|Get|Set)</td>
    <td></td>
    <td></td>
    <td>Everything in this section should be in Rococo's GUI Editor</td>
  </tr>
  <tr>
    <td>MouseEvent</td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr><th colspan="5"><h3>Language and Nation</h3></th></tr>
  <tr>
    <td>Use Internationalised Strings</td>
    <td>Various</td>
    <td></td>
    <td></td>
    <td>Just use See <a href="https://raku.land/tags/i18n">I18N</a> for a list of available addons;
      This stuff probably belongs in Rococo's GUI/Document Editors</td>
  </tr>
  <tr><th colspan="5"><h3>Reports (Printer)</h3></th></tr>
  <tr>
    <td>Table Output; note that outputting tables on the command line as CSV, human-only, half-human, etc, is also 
      relevant here; cf. also Table Editor under UI, above</td>
    <td>Browse, dbEdit</td>
    <td>Writer tables, but also traditional database reports</td>
    <td>HTML table</td>
    <td>Everything in this section should be in the Rococo's Document Editor</td>
  </tr>
</table>
<table>
  <tr>
    <th>Item</th>
    <th>PurrData</th>
    <th>???</th>
    <th>HTML</th>
    <th>Rococo</th>
  </tr>
  <tr><th colspan="5"><h3>Audio</h3></th></tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td>This stuff probably belongs in the DataFlow Editor</td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr><th colspan="5"><h3>Video Functions, Video</h3></th></tr>
</table>

</content>
</page>