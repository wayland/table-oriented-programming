<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../interface.xsl"?>
<page>
<filename>TOP/Raku/Relation.xml</filename>
<content>
<p>The Relation is a role that represents all features common to Tables and 
Views.  </p>

<p>Many of the following Raku examples would be shortened by wrapping <code>given $relation {...}</code> around them.</p>

<h1>Basic Functions</h1>

<h2>Columns (Fields)/Associative</h2>

<p>In Raku, Relation does the <a href="https://docs.raku.org/type/Associative">Associative</a> (hash array) role 
to access columns.  For more information, see <a href="https://docs.raku.org/language/hashmap">Hashes and maps</a>.</p>
<p>That means all of the following are possible:</p>

<div class="not-implemented"><code>
$column = $relation&lt;column name&gt;;                   # Fetch a relation column with a hardcoded name
$column = $relation{$column-name};                  # Fetch a relation column with the name in a variable

$value = $relation{$column-name}.[$row-number];     # Fetch cell contents by column, then row
$relation{$column-name}[$row-number] = $value;      # Set cell contents by column, then row

$relation.elems :column;                            # Count columns in relation
</code></div>

<h2>Rows (Tuples)/Positional (&amp; Iterator)</h2>

<p>In Raku, Relation does the Positional (array) role to access columns.  For more information, see:
<a href="https://docs.raku.org/language/list">Lists, sequences, and arrays</a></p>

<p>That means all of the following are possible:</p>

<div class="not-implemented"><code>
$row = $relation[$rownum];                           # Get a row from a relation

for $relation { .... }                               # Iterate over the rows in a relation

$value = $relation[$row-number]{$column-name};       # Get cell contents by row, then column
$relation[$row-number]{$column-name} = $value;       # Set cell contents by row, then column

$relation.elems;                                     # Count rows in relation
$relation = Empty;                                # Empty relation
</code></div>

<h1>Other Material</h1>

Next items:

<ul>
  <li>Move material about Access Modes into TOP::Core</li>
  <li>Write up "upsert" and "select"</li>
  <li>Investigate Raku lists for ways of transferring data between relations, and implement that; include importing/exporting</li>
  <li>Move material about Query Time Limits into class Database</li>
  <li>Finish off table at bottom of page</li>
  <li>Integrate Protocol Suggestion</li>
  <li>Look at Gradual Typing, and write something up about it</li>
  <li>Go back and redo TOP::Core</li>
  <li>Move onto the next stage</li>
</ul>

<h3>Transferring</h3>

<div class="blockquote">

This is the easy ability to transfer or copy information from one collection to
another. 

<div class="reference">
	<i><a href="https://web.archive.org/web/20121111043922/http://www.geocities.com/tablizer/collrght.htm">
		Collection Bill of Rights</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>



<h3>Exporting/Importing</h3>

<p>Transferring and export/import are essentially the same; we just have to 
write drivers for all the things (as per 
<a href="Collection-Convergence/Database-Engine-Neutrality.html">
Database Engine Neutrality</a>).  </p>

<div class="blockquote">

<p>This is similar to Transferring, except that the result is intended for or 
comes from some source external to the current system. The minimum supported 
formats should be common ASCII formats such as comma and quote delimited, tab 
delimited, and fixed-column width (SDF). Other common formats include .DIF (Data 
Interchange Format), .DBF tables (XBase original format), HTML and/or XML, and 
.WK1 (an old Lotus spreadsheet format). There are many other formats to 
consider, but these are usually proprietary or subject to constant format 
revisions.</p>

<div class="reference">
	<i><a href="https://web.archive.org/web/20121111043922/http://www.geocities.com/tablizer/collrght.htm">
		Collection Bill of Rights</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<h3>Query Time Limits</h3>

<div class="blockquote">

<p>A way to limit the upper size or time of a query result. Users generating 
"runaway" queries is a common cause of performance bottlenecks.</p>

<div class="reference">
        <i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<h3>Gradual Typing</h3>

<div class="blockquote">

<p>Support for high, medium, and low formality tables. Other languages usually 
give you only one way to deal with tables and assume tables are either large and 
formal, or small and featureless.</p>

<div class="reference">
	<i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<p>This is an area where Raku's
<a href="https://en.wikipedia.org/wiki/Gradual_typing">Gradual Typing</a> system
is very much aligned with the goal here.  </p>

<h1>Protocol Suggestions</h1>

<p>The following is the suggestion of Tablizer/TOPMind:</p>

<div class="blockquote">

<p>Here are the parameters of my draft protocol: 
(They will probably make more sense when examples 
are later given.)</p>

<ul>
  <li><b>#by</b> - specify key field.</li>
  <li><b>#target</b> - specify value being sought.</li>
  <li><b>#get</b> - field(s) to return.  Similar to an SQL "select" statement.</li> <!-- hide: We will assume all fields are returned if not given. -->
  <li><b>#defby</b> - default "by" value if "by" parameter not supplied.</li>
  <li><b>#defget</b> - default "get" value if "get" parameter not supplied.</li>
  <li><b>#where</b> - SQL-like "where" clause for fancier lookups.</li>
  <li><b>#result</b> - the result of the lookup.  Later examples do away with this, or at least reduce it's usage.</li>
  <li><b>#resultCount</b> - Number of results returned. Zero means "not found".</li>
</ul>

<blockquote><small>
We are using number signs "#" here to designate 
named parameters, but actual conventions vary per 
language. One
problem with the equal-sign approach of some 
languages, such as JavaScript, is that each named 
parameter usually must have a sub-parameter or 
looks "funny" without it. Many protocols don't 
need sub-parameters. This is something that
annoys me about XML, which mucks up things
like the HTML "HR  NOSHADE" command set which
under XML has to be something like "HR  SHADE=NO".
In other words, you lose a sense of naturalness
to such a language. However, I suppose such
issues are subjective, based on past debates.
</small></blockquote>

<p>Now for some examples.</p>
<pre>
  phoneBook #defby "name"  #defget "phoneNum"
  phoneBook #target "Jake Jones" 
  if phoneBook( #resultCount) == 1
     phoneNum = phoneBook( #result)
  else
     printLine "Not found"
  end if
</pre>

<p>This is generally the same as the prior Rhonda 
Johnson array example. A language that supported 
array syntax overriding could <b>still</b> use 
syntax identical to the Rhonda example. Thus, this
example is generally a "long cut". </p>
<p>Note that if you consider that the "#defby" has to 
only be done once if there is only one key, then 
it will not have to appear for every search. If 
you will be using different keys and fields, then 
the first few lines would perhaps look like:</p>
<pre>
  phoneBook #by "name" #target "Mike Jones" #get "phoneNum"
  if phoneBook( #resultCount) == 1
  ...
</pre>

<blockquote><small>
An issue arises about what happens if the 
underlying implementation does not support a key 
requested by "#get". One approach is to use a 
sequential search instead of the (missing) index 
or hash. This is how most SQL-based engines do it. 
Alternatively, the protocol implementer could 
throw an error. The reasoning behind the SQL
approach is that the existence of an index
is not something that the data requester
should have to concern him/herself with.
The data requester only has to concern
him/herself with what they want, not how
to retrieve it. Overall, I agree. However,
hiding "retrieval cost" information from a user
can have problems. "Run-away queries" are not
uncommon.
</small></blockquote>

<p>If you want it all on one line or statement to make it resemble
the single hash syntax and you know there is one and only
one result, then you can do:</p>
<pre>
  phoneNum = phoneBook( #result #by "name" #target "Zack Jones"  _
                        #get "phoneNum")

  // Or, if the defaults were assigned:
  phoneNum = phoneBook( #result #target "Zack Jones")

  // We could add a new keyword to shorten it even more
  phoneNum = phoneBook( <b>#hash</b> "Zack Jones")
  // Compare this to original:
  phoneNum = phoneBook["Zack Jones"]
</pre>
<p>I got it down to <b>only one more</b> token longer than
a simple hash. If we solve the "setup problem" (below),
then array fans have little to complain about if they
lose their arrays altogether (which is not what I
am proposing in many cases anyhow).</p>

<p>I would like to make some adjustments to the above 
examples. In many applications multiple fields are 
referenced per seek. In other words, they tend to resemble 
the Fred Lee example given early on.</p>
<pre>
  ....
  if phoneBook( #resultCount) == 1  then
    phoneNum = phoneBook.phoneNum
    ssn  = phoneBook.ssn
    dept = phoneBook.department
    // Or, just use the field references directly 
    // rather than assign them to memory variables.
    // Perhaps use "PB" instead of "phoneBook" if it
    // will be referenced often.
    ....
</pre>

<p>Here, "phoneBook" has fields that can be referenced 
via dot syntax. (Whether the dots denote objects, 
hash arrays, or something else is not dealt with 
here because it is language-specific. Note that if 
hashes are used, this is using hashes as a 
protocol/interface mechanism and not as data storage. This
is what hashes are best used for IMO.)</p>
<p>What if there is more than one result record? To 
handle these, our protocol starts to resemble 
typical RDBMS interfaces.</p>
<pre>
  PB #by "name" #target "Bob Klob"
  if PB( #resultCount) == 0 
     printLine "Nothing found!"
  else
     while PB(#getNext)   // loop thru each result record
        printLine "Name: " &amp; PB.name
        printLine "SSN:  " &amp; PB.ssn
        printLine "Dept: " &amp; PB.department
     end while
  end if
</pre>
<p>If we change the first line to:</p>
<pre>
  PB #where "name = 'Bob Klob'"
</pre>
<p>Then it closely resembles SQL-based client/server code 
in many RDBMS based software. (There are many 
syntactical variations on this theme which depend 
on the language or the API designer.)</p>

<div class="reference">
	<i><a href="https://web.archive.org/web/20121111044038/http://www.geocities.com/tablizer/array1.htm">Arrays May Be Harmful</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<p>This is a page which is designed to compare Raku TOP (ie. Raku with the TOP module) with xBase/xHarbour.  </p>

<style>
td {
  padding: 6pt; 
  vertical-align: top;
}
th h2, th h3 {
  margin: 0px;
}
</style>


<table>
  <tr>
    <th>Item</th>
    <th>xHarbour</th>
    <th>PostgreSQL</th>
    <th>Raku TOP</th>
  </tr>
  <tr><th colspan="4"><h2>Relation Functions</h2></th></tr>
  
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td>The following Raku examples assume that <code>given $relation {...}</code> is wrapped around them.  .  </td>
  </tr>
  <tr>
    <td></td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#dbappend">dbAppend</a>(&lt;lock&gt;)</code></td>
    <td><code><a href="https://www.postgresql.org/docs/current/sql-insert.html">INSERT</a></code></td>
    <td class="not-implemented"><code>.upsert({&lt;field&gt; => $value, ...})</code></td>
  </tr>
  <tr>
    <td>Return the data dictionary entries for a table structure (a data dictionary is just another table)</td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#__dbstructfilter">__dbStructFilter</a>
<a href="https://harbour.github.io/doc/harbour.html#__fledit">__FLedit</a>
<a href="https://harbour.github.io/doc/harbour.html#dbstruct">dbStruct</a></code></td>
    <td></td>
    <td class="not-implemented"><code>.dictionary(fields => [...])</code></td>
  </tr>
  <tr>
    <td></td>
    <td><code><a href="https://harbour.github.io/doc/harbour.html#lupdate">LUpdate</a></code></td>
    <td></td>
    <td class="not-implemented">.updated :as('date')</td>
  </tr>
</table>

</content>
</page>