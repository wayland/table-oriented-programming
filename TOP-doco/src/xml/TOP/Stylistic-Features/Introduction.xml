<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/interface.xsl"?>
<page>
<filename>TOP/Stylistic-Features/Introduction.xml</filename>
<content>
<h1> Thinking "Tablely" </h1>

<div class="blockquote">

<p>Thinking in terms of ITOP is more than just storing data, it is using tables 
to organize programs and program logic. Often big programs are nothing more than 
repeated code with slight variations. Rather than store this similarity in code, 
putting it in tables makes it easier to organize because tables are 2D and code 
is 1D. This was demonstrated numerically in our 
<a href="https://web.archive.org/web/20120918011533/http://geocities.com/tablizer/top.htm#linear">
Data Dictionary</a> example.</p>

<p> Not all software can be organized this way...., [b]ut the opportunity arises 
fairly often if you know what to look for. ...</p>

<p> Just like OOP, it takes time and practice to learn how to organize software 
using control tables, but will eventually pay off in software that is easier to 
maintain. Unlike OOP, tables are a familiar organizational concept. Just look at 
a city bus schedule.</p>

<p>While [some paradigms] attempts to keep you on course by putting up edge 
barriers, control tables keep you on course by giving you a better view of the 
course.</p>

<div class="reference">
        <i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>

</div>

<h1>Major TOP Programming Techniques</h1>

<ul>
	<li><a href="Stylistic-Features/Control-Tables.html">Control Tables</a></li>
	<li><a href="">Code Management</a></li>
</ul>

<h1>Further examples of TOP</h1>

<p>Examples of Table-Oriented Programming (not using Raku):</p>

<ul>
	<li><a href="prpats.htm"><nobr>P/R Patterns (GOF)</nobr></a></li>
	<li><a href="shapes.htm">Shapes Example</a></li>
	<li><a href="lib.htm"><nobr>Publications Example</nobr></a></li>
</ul>
</content>
</page>