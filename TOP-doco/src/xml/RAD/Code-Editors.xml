<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../interface.xsl"?>
<page>
<filename>RAD/Code-Editors.xml</filename>
<content>
<h1>Overview</h1>

<p>A great RAD needs the following code editors:</p>

	<ul>
		<li><b>Regular Code Editor:</b> These are standard; no explanation 
			needed</li>
		<li><b>Source control visual tools:</b> To reduce the time spent managing 
			the code</li>
		<li><b>Relation Code Editors:</b> In Table-Oriented Programming, both 
			code and data can be stored in tables.  Think of this as being like 
			a spreadsheet, but you can compile it.</li> 
		<li><b>Dataflow Code Editors:</b> In dataflow programming, there's a 
			diagram that represents how the data flows.  Some of the nodes in 
			the diagram have code inside them.  We should be able to edit it.  
			</li> 
	</ul>


<h1>Regular Code Editor</h1>

<p>Lets you edit your code.  Has syntax highlighting.  The only unusual features 
are:</p>

<ul>
	<li><b>External code jumps:</b> The other code editors can trigger it to 
		jump to particular places in the file.  </li>
	<li><b>Pane-based:</b> This is a pane that can be incorporated into the 
		other code editors when they need to let people edit code.  </li>
</ul>

<h1>Source Control GUI</h1>

<p>One with lots of features; probably draw on <a href="https://git-scm.com/downloads/guis">
Git GUI Clients for inspiration.  </a></p>

<h1 id="Relation">Relation Code Editor</h1>

<p>In Table-Oriented Programming, both code and data can be stored in tables.  
There should be a visual editor for the tables in question, though it should 
have a way of editing the cell in a separate window (so we can have the table on 
one screen, and the code for a particular cell on another).  Think of this as 
being like a spreadsheet, but you can compile it).</p>

<div class="blockquote">
<ul>
<li>Built-in, but optional, sort and search features for data grids. The user 
should be able to double-click on a column heading and chose to sort by or 
search on the field of that column.</li>

<li>Use of checkboxes, icons, etc. as representations of fields should be 
definable in the DD. Perhaps this can be done by having the post-validation 
function return a string with a special code for GUI components. For example, a 
checkbox might be specified with "@gui:checkbox value=on". An icon could be 
represented as such: "@gui:icon file='folder.gif'".</li>

</ul>
<div class="reference">
        <i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>


<h1 id="Dataflow">Dataflow Code Editor</h1>

<p>In dataflow programming (such as node-red or n8n, but also any language that 
has concurrency features), there's a diagram that represents how the data flows.  
Some of the nodes in the diagram have code inside them.  In my experience, the 
best interface is that of n8n, which stores the dataflow from previous runs, 
and, when a code node is clicked, it shows you the code in the centre, on the 
left the data from the previous run, and on the right, what your current code 
would turn that data into.  n8n only really handles json though.</p>
</content>
</page>
