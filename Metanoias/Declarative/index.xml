<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../interface/layout.xsl"?>
<page>
<filename>Declarative/index.xml</filename>
<sitedir>Metanoias</sitedir>
<content>

<h1>Declarative Features in Raku</h1>

<p>Raku already has a moderate amount of declarative programming built 
in.  The almost-declarative features include:</p>
<ul>
  <li>Grammars are declarative programming, and already have a backtracking 
    engine built in (useful for Logic Programming), but need a bit of 
    generalisation to make them even more flexible.  </li>
  <li>Multiple dispatch is a lot like unification (another key component of
    Logic Programming), but with a few key differences.  </li>
</ul>

<p>However, the goal of this proposal is that we be able to do general-purpose
declarative programming, not specific-purpose declarative programming.</p>

<p>The facilities mentioned above get us about 90% of the way there, but 90% 
is not 100%, so the obvious question is "What else do we need to adopt from
declarative languages to allow general-purpose declarative programming?"</p>

<h1>Introduction to Declarative Programming</h1>

<p>Declarative programming has a long history of producing very powerful 
languages for which it is difficult to find applications, and which 
programmers don't understand.  </p>

<p>...with the exception of SQL.  Why is that?  Well, SQL had a number of
things going for it, but the biggest requires a tiny dive into its history.
The original name was SEQUEL, which stood for Structured English Query
Language (the name was abandoned for copyright reasons).  The key work here is 
English.  There was a movement in earlier days to make programming more 
accessible to non-programmers.  This meant moving away from mathematical 
language, and towards languages with more English-like tokens.  I'm assuming 
SEQUEL was a part of that movement.  </p>

<p>In particular, its references to tables, records and fields was more 
accessible than backtracking and unification.  </p>

<p>So the question here is, how can we make a kind of declarative programming
that will be as accessible as SQL, but as flexible as the more 
general-purpose declarative programming.  The first place to look for 
concepts (but not terminology!) is Logic Programming.  This is because it's 
one of the most generic and flexible declarative paradigms, and a few 
borrowed features will serve as a suitable base for building other 
declarative structures.  </p>

<h1>Declarative Programming -- a Survey</h1>

<h2>Declarative Abstractions</h2>

<p>To make Raku suitable for declarative programming, we have to 
abstract out some core features that are widely used across declarative 
programming languages.  A number of the sections below will begin with 
abstracting.  </p>

<h2>Basic Structures</h2>

<p>The basic structures of declarative programming are:</p>
<ul>
  <li>A <b>Source</b> data structure of some kind</li>
  <li>A <b>Query</b> (made of patterns) that walks the source, matching 
    against it (and triggering actions, either locally, or in the Producer)</li>
  <li>Optionally a <b>Producer</b> (made of actions) triggered by the query that outputs
    the Target; this is a way of making the query results Streamable (ie.
  	dealing with it a chunk at a time instead of as a whole).  Raku grammars do 
	  this.  </li>
  <li>A <b>Target</b> data structure (ie. the results of the query)</li>
</ul>

<p>There are already some languages which you may have used which support at 
least some of these structures.  For familiarity purposes, a skim through the 
following might be useful for comparison at this point:</p>

<style>
div.datatype {
  background-color: #dfffdf;
  padding: 4pt;
  border: 1pt dotted black;
}
td {
  vertical-align: top;
}
</style>

<table>
  <tr>
    <th>Language</th>
    <th>Source Data Structure</th>
    <th>Query (pattern part)</th>
    <th>Query (action part)</th>
    <th>Result Data Structure</th>
  </tr>
  <tr><th colspan="5"><h3>Document Transformation</h3></th></tr>
  <tr>
    <th>Raku Grammars</th>
    <td><div class="datatype"><b>Stream</b></div>Text to be parsed ($target passed to Grammar.parse())</td>
    <td>The grammar is the "query" -- we're asking the source questions using the grammar</td>
    <td>The Actions object</td>
    <td><div class="datatype"><b>Tree</b></div><br/>Whatever comes out of the grammar, usually an AST</td>
  </tr>
  <tr>
    <th>XSLT</th>
    <td><div class="datatype"><b>Tree</b> (automatically pre-parsed)</div>
      The source .xml document (already transformed into a tree)</td>
    <td>XPath</td>
    <td>The xsl:template entries</td>
    <td><div class="datatype"><b>Tree</b> (automatically post-serialised)</div>
      The output .xml file (as a tree; it's later serialised to disk)</td>
  </tr>
  <tr><th colspan="5"><h3>Systems Programming</h3></th></tr>
  <tr>
    <th>Makefile</th>
    <td><div class="datatype"><b>Filetree</b></div>Source directory tree</td>
    <td>The glob-like selectors at the top of each Makefile entry</td>
    <td>The commands run in the Makefile</td>
    <td><div class="datatype"><b>Filetree</b></div>Destination directory tree</td>
  </tr>
  <tr>
    <th>Puppet</th>
    <td><div class="datatype"><b>OS Config</b></div>Initial OS config</td>
    <td>Puppet manifests (the selection parts)</td>
    <td>Puppet manifests (the action parts)</td>
    <td><div class="datatype"><b>OS Config</b></div>Final OS config</td>
  </tr>
  <tr><th colspan="5"><h3>Query Resolving</h3></th></tr>
  <tr>
    <th>SQL</th>
    <td><div class="datatype"><b>Table</b></div>The existing database</td>
    <td>The Query</td>
    <td></td>
    <td><div class="datatype"><b>Table</b></div>The result set, or changes to the database</td>
  </tr>
  <tr>
    <th>Prolog</th>
    <td><div class="datatype"><b>Table</b> with selection code</div>Database of facts, predicates, functors, and the like</td>
    <td>Query</td>
    <td></td>
    <td><div class="datatype"><b>Table</b> with selection code</div>Result</td>
  </tr>
</table>

<p>For those of you familiar with compiler theory, this sounds a bit like
a tombstone diagram with an extra Producer step, and you'd be right.  </p>

<p>If we combine this concept with concatenative programming (ie. feed 
operators, etc), then we can end up with a chain of 
source/query+producer/result chains, where each result is the source for the 
next query.  </p>

<p>From this, it can be seen that it'd be useful to have standardised 
language (or languages) built in to handle conversions between some of the 
standard data formats, specifically, streams, tables, and trees.  </p>

<p>The following shows examples of existing languages that do the particular
types of conversion.  </p>

<table>
  <tr>
    <th>Source-type</th>
    <th>Destination-type</th>
    <th>Languages</th>
  </tr>
  <tr>
    <td>Stream</td>
    <td>Tree</td>
    <td>Raku Grammar</td>
  </tr>
  <tr>
    <td>Tree</td>
    <td>Tree</td>
    <td>XSLT, Makefile</td>
  </tr>
  <tr>
    <td>Table</td>
    <td>Table</td>
    <td>SQL, Prolog</td>
  </tr>
</table>

<p>Some of the above languages <i>can</i> do other types of conversions (eg.
XSLT can generate HTML tables), but the ones in the table above are the ones
they're best adapted to.  </p>

<p>Ideally, we'd like to include enough functionality to support the following paradigms:</p>
<ul>
  <li><a href="https://en.wikipedia.org/wiki/Logic_programming">Logic Programming</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Constraint_programming">Constraint Programming</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Rule-based_system">Rule-based Systems</a></li>
</ul>

</content>
</page>
