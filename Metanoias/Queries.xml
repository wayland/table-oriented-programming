<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../interface/layout.xsl"?>
<page>
<filename>Queries.xml</filename>
<sitedir>Metanoias</sitedir>
<content>

<p>An instance of a query will sit in a feed operator pipeline or something 
similar, and will be fed a source, and use an Producer to produce output.  </p>

<p>A Query will be one of the following:</p>

<ul>
  <li>A stream query such as:</li>
  <ul>
    <li>A Raku grammar (with attached Action object as Producer)</li>
  </ul>
  <li>A table query such as:</li>
  <ul>
    <li>A predicate call</li>
  </ul>
  <li>A tree query, such as:</li>
  <ul>
    <li>An XPath-like query</li>
    <li>A glob</li>
  </ul>
  <li>The selection parts of a Puppet manifest</li>
</ul>

<p>Now our question should be, "How can we unify most of these into a single
query language.  A good place would be to start with Backtracking, since that's
in both Raku grammars and Prolog queries (predicate calls).  </p>

<p>See <a href="Backtracking-Transactions.xml">Backtracking and 
Transactions</a> for details.  </p>

<h1>Querying in Raku</h1>

<h2>Comparison of Declarative Raku Queries with Other Concepts</h2>

<style>
.greyed-out {
  color: grey;
}
</style>

<table>
  <tr>
    <th>Declarative Raku</th>
    <th class="greyed-out">Imperative Raku</th>
    <th>Raku Grammars</th>
    <th>SQL</th>
    <th>Prolog</th>
    <th>XSLT</th>
    <th>Comments</th>
  </tr>
  <tr>
    <th>query</th>
    <td class="greyed-out">class</td>
    <td>grammar</td>
    <td>query</td>
    <td>query (partly)</td>
    <td>stylesheet</td>
    <td></td>
  </tr>
  <tr>
    <th>proto declaration</th>
    <td class="greyed-out">proto declaration</td>
    <td>proto declaration</td>
    <td>sub-query</td>
    <td>query (partly)</td>
    <td>modes</td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <th>pattern declaration</th>
    <td class="greyed-out">multi method</td>
    <td>rule/token declaration</td>
    <td>???</td>
    <td>???</td>
    <td>template declaration</td>
    <td>In all relevant cases, <br/>this is just the name and <br/>parameters, not the body</td>
  </tr>
  <tr>
    <th>pattern body</th>
    <td class="greyed-out">-</td>
    <td>regex/rule/token body</td>
    <td>WHERE clause</td>
    <td>query (partly)</td>
    <td>XPath selector on template</td>
  </tr>
  <tr>
    <th>action</th>
    <td class="greyed-out">method body</td>
    <td>body of method in Action class</td>
    <td>-</td>
    <td>-</td>
    <td>template contents</td>
    <td></td>
  </tr>
  <tr>
    <th>Walkable</th>
    <td></td>
    <td>$target (passed to Grammar.parse)</td>
    <td>Database + cursor</td>
    <td>database + rules</td>
    <td>Source XML</td>
    <td></td>
  </tr>
  <tr>
    <th>sub-pattern call</th>
    <td class="greyed-out">method call</td>
    <td>Using named regexes</td>
    <td>Sub-selects, or using a table from a CTL</td>
    <td>Calling other predicates (Prolog doesn't distinguish much between source and query)</td>
    <td>Calling apply-templates (though this actually triggers another walk 
      of the source tree, so maybe it's different)</td>
  </tr>
</table>

<h1>Constraint Programming in Raku</h1>

<h1>Appendix A: Query Patterns</h1>

<p>While it's not necessary to implement this, it could be useful to look at 
some design patterns that can be used in queries.  </p>

<p>Just as object-oriented programming has design patterns, so we can have
standard patterns in this querying language as well.  There are two that are 
particularly relevant.  </p>

<h2>Select Stages Pattern</h2>

<p>One is the <a href="Raku-TOP/Relation/Relation.xml#Select-Stages">Select 
Stages</a> used by the SQL SELECT statement -- see that link for details.  
</p>

<h2>Compiler Pattern</h2>

<p>The other pattern is based on the stages of a compiler.  According to the
Dragon book<ref 
  title="Compilers: Principles, Techniques, and Tools"
  publishinghouse="Addison-Wesley"
  publishinglocation="Reading, Massachusetts"
  publishingdate="1986"
  pages="10"
>
  <authors>Alfred V. Aho, Ravi Sethi, Jeffrey D. Ullman</authors>
  <comment>The Dragon book includes an "Intermediate Code Generation" step which I've omitted.</comment>
</ref>, these are:</p>

<table>
  <tr>
    <th>Stage (Dragon Book)</th>
    <th>Output (Tim Nelson)</th>
    <th>Comments</th>
  </tr>
  <tr>
    <td>(Source Program)</td>
    <td><b>Stream</b> of characters</td>
    <td></td>
  </tr>
  <tr>
    <td>Lexical Analysis</td>
    <td><b>List</b> of Tokens</td>
    <td rowspan="2">Raku Grammars</td>
  </tr>
  <tr>
    <td>Syntactic Analysis</td>
    <td>Syntax <b>Tree</b></td>
  </tr>
  <tr>
    <td>Semantic Analysis</td>
    <td>Tree</td>
    <td>Same tree, but marked up more</td>
  </tr>
  <tr>
    <td>Code Optimisation</td>
    <td>Tree</td>
  </tr>
  <tr>
    <td>Code Generation</td>
    <td><b>Stream</b> of characters</td>
  </tr>
</table>

<p>However, the pattern is not completed by the stages above.  There are two
other components with which all stages communicate.  These are:</p>

<ul>
  <li>The Symbol <b>Table</b></li>
  <li>The error handler</li>
</ul>

<div style="background-color: red">-</div>

<h1>Older stuff</h1>

<h1>Declaraku Sub-language</h1>


Patterns (with associated actions) are grouped into Queries, which are 
grouped into Realms.  

<h2>Queries</h2>

<ul>
  <li>Querying: For a Query, you would specify:</li>
  <ul>
    <li>A Source database to use</li>
    <li>A Realm to use, and a starting Query</li>
    <li>An Action class to use</li>
  </ul>
  <li>Queries have a Matching phase (Patterns), followed by an Action phase (Actions)</li>
</ul>

<h2>Query Grouping</h2>

<p>Patterns (with associated actions) are grouped into Queries, which are grouped into Realms.  </p>

<ul>
  <li>Pattern Grouping:</li>
  <ul>
    <li>Query: A group of pattern-action pairs.  Each Query has a name and a type.  Each query is uniquely identified by its name/type pair</li>
    <li>Realm: A Group of Queries</li>
  </ul>
  <li>Pattern Types</li>
  <ul>
    <li>Text: For transforming text; basically Raku grammars, but can call out to other, non-Text types in the same Query</li>
    <li>XML: Functionally like XSLT (though not written in XML), but can call out to other, non-XML types in the same Query</li>
    <li>System: Actions are functionally like Puppet resources; not sure what patterns, if any, are relevant</li>
  </ul>
  <li>Patterns:</li>
  <ul>
    <li>Each query type has a different kind of pattern</li>
    <li>If the query is </li>
  </ul>
  <li>Actions: Actions have a (top-level) specification here (roughly 
    equivalent to a function call with named parameters), but are implemented 
    in classes (see below)</li>
  <ul>
    <li>Text output: put straight into output document</li>
    <li>Tree output (XML): put into destination tree, which will later be transformed into an output document</li>
  </ul>
</ul>

<h3>List of Query Types</h3>

<table>
  <tr>
    <th>Name</th>
    <th>Reference Model</th>
    <th>Pattern type</th>
    <th>Database walked</th>
  </tr>
  <tr>
    <th>Text</th>
    <td>Raku Grammar/Action</td>
    <td>Regex</td>
    <td>Source text</td>
  </tr>
  <tr>
    <th>XML</th>
    <td>XSLT</td>
    <td>XPath</td>
    <td>XML source document (but with reference to other sources)</td>
  </tr>
  <tr>
    <th>Filesystem</th>
    <td>Makefiles</td>
    <td>Glob</td>
    <td>Directory Tree</td>
  </tr>
</table>

<h2>Classes</h2>

<p>Classes are Raku classes, and determine the actions that can be taken.  
There are some default roles that can be done that take care of actions like:</p>

<ul>
  <li><b>System:</b> Puppet resources, including a Shell one (for makefile-like ones); can declare our own "manifests" (methods)</li>
  <li>Destination document roles (these can all be composed into the same class):</li>
  <ul>
    <li><b>Text:</b> Emits text into the destination document</li>
    <li><b>XML:</b> Emits XML into the destination document</li>
  </ul>
  <li><b>Database:</b> Alters the database in some way (eg. Prolog Fact specification)</li>
</ul>

</content>
</page>
