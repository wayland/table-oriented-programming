#!/usr/bin/raku

use v6.c;

use	Hash::Ordered;
use	Hash::Agnostic:ver<0.0.11>:auth<zef:lizmat>;

class	TOP::TableField is Array {}

class	TOP::TableRow is Hash::Ordered {}

class	Table does Hash::Agnostic {
	has			%!field-indices;
	has	Str		@.field-names;
	has	TOP::TableField	@.fields;
	has	TOP::TableRow	@.rows handles <elems AT-POS EXISTS-POS, DELETE-POS, ASSIGN-POS, BIND-POS, STORE>;

	# Associative interface, used for fields
	# 	Must: AT-KEY, EXISTS-KEY
	#	May: DELETE-KEY, ASSIGN-KEY, BIND-KEY, STORE

	# Field (Associative) key locator
	method AT-KEY(::?ROLE:D: \key) is raw {
		Proxy.new(
			FETCH => {
				with %!field-indices.AT-KEY(key) {
					@!fields.AT-POS($_)
				}
				else { Nil }
			},
			STORE => -> $, \value {
				with %!field-indices.AT-KEY(key) {
					@!fields.ASSIGN-POS($_, value)
				}
				else {
					my int $index = @!field-names.elems;
					@!field-names.ASSIGN-POS($index, key);
					%!field-indices.BIND-KEY(key, $index);
					@!fields.ASSIGN-POS($index, value)
				}
			}
		)
	}

	method BIND-KEY(::?ROLE:D: \key, \value) is raw {
		with %!field-indices.AT-KEY(key) -> \index {
			@!fields.BIND-POS(index, value)
		}
		else {
			my int $index = @!field-names.elems;
			@!field-names.ASSIGN-POS($index, key);
			%!field-indices.BIND-KEY(key, $index);
			@!fields.BIND-POS($index, value);
		}
	}


	method CLEAR(::?ROLE:D:) {
		%!field-indices = @!field-names = @!fields = @!rows = Empty;
	}

	method DELETE-KEY(::?ROLE:D: \key) {
		with %!field-indices.DELETE-KEY(key) -> \index {
			my \value = @!fields[index];

			@!field-names.splice:   index, 1;
			@!fields.splice: index, 1;

			%!field-indices.AT-KEY(@!field-names.AT-POS($_))-- for index .. @!field-names.end;

			value
		}
	}

	method EXISTS-KEY(::?ROLE:D: \key) {
		%!field-indices.EXISTS-KEY(key)
	}

	method gist(::?ROLE:D:) {
		'gist-needs-fixing' . '{' ~ self.pairs.map( *.gist).join(", ") ~ '}'
	}

	method Str(::?ROLE:D:) {
		'Str-needs-fixing' . self.pairs.join(" ")
	}

	method raku(::?ROLE:D:) {
		'raku-needs-fixing' . self.perlseen(self.^name, {
			~ self.^name
			~ '.new('
			~ self.pairs.map({$_<>.perl}).join(',')
			~ ')'
		})
	}

	# Positional interface, used for rows
	#	Must: elems, AT-POS, EXISTS-POS
	#	May: DELETE-POS, ASSIGN-POS, BIND-POS, STORE
	# Just delegate these to @.rows, if possible

	##### Other methods
	method	ingest(@rows) {
		self = @rows;
	}
}

class	TOP::TableMaker {
	method	createTable(*%params) {
		my $table = TOP::Table.new();
		given %params<type> {
			when 'csv' {
				use CSV::Parser;

				my $file_handle = open %params<filename>, :r;
				my $parser = CSV::Parser.new(
					:$file_handle,
					:contains_header_row,
				);
				my @rows;
				until $file_handle.eof {
					my %data= %( $parser.get_line() );
					@rows.push(%data);
				}

				$table.ingest(@rows);
			}
		}
		say %params;

		return $table;
	}
}

sub	seek(TOP::Table $table, &when_clause) {
	for $table -> $row {
		when_clause($row);
	}
}


my $tm = TOP::TableMaker.new();

my TOP::Table $countries = $tm.createTable(
	type => 'csv',
	filename => '/home/wayland/src/finance/raw-data/General/Countries/all.csv'
);

for @( $countries ) -> $_ {
	.say;
	given $_<name> {
		when rx:i/brit/ {
			.say;
		}
	}
}


