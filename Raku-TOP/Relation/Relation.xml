<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../interface/layout.xsl"?>
<page>
<filename>Relation/Relation.xml</filename>
<sitedir>Raku-TOP</sitedir>
<content>
<p>The Relation is a role that represents all features common to Tables and 
Views.  </p>

<p>Many of the following Raku examples would be shortened by wrapping <code>given $relation {...}</code> around them.</p>

<p>Maybe make this descend from Raku Set as well, and ensure we can use the Set operators.  </p>

<h1>Concepts</h1>

<h3>Gradual Typing</h3>

<div class="blockquote">

<p>Support for high, medium, and low formality tables. Other languages usually 
give you only one way to deal with tables and assume tables are either large and 
formal, or small and featureless.</p>

<div class="reference">
	<i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<p>This is an area where Raku's
<a href="https://en.wikipedia.org/wiki/Gradual_typing">Gradual Typing</a> system
is very much aligned with the goal here.  </p>

<h3>Perspectives</h3>

<p>Perspectives are views of the data that might include different material.  Examples might be:</p>

<ul>
  <li>History: track what the table looked like in the past</li>
  <li>Proposal: track the changes that have been recommended (but not yet approved)</li>
</ul>

<p>For Relations that have a History perspective, it should be possible to request historical data, but without
having to worry about that for the most part.  </p>

<p>These should mainly be relevant for the following methods:</p>
<ul>
  <li>select: can pass in a perspective to change what's returned</li>
  <li>upsert: Can pass in a perspective, and it'll be inserted into that perspective</li>
  <li>oldest_updated: Can pass in a perspective, and it will eg. dig back into the history</li>
</ul>

<h1>User Database Example</h1>

<p>We'll be working with the following example in this document:</p>

<h5>User</h5>

<table>
  <tr>
    <th>Int id</th>
    <th>Str given_name</th>
    <th>Str surname</th>
  </tr>
  <tr>
    <td>1</td>
    <td>John</td>
    <td>Smith</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Jane</td>
    <td>Doe</td>
  </tr>
  <tr>
    <td>3</td>
    <td>Johann</td>
    <td>Schmidt</td>
  </tr>
  <tr>
    <td>4</td>
    <td>Jeanne</td>
    <td>Forgeron</td>
  </tr>
</table>

<h5>Group</h5>

<table>
  <tr>
    <th>Int id</th>
    <th>Str group_name</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Widgets</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Doohickeys</td>
  </tr>
  <tr>
    <td>3</td>
    <td>Product</td>
  </tr>
</table>

<h5>Role</h5>

<table>
  <tr>
    <th>Int id</th>
    <th>Str role_name</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Manager</td>
  </tr>
  <tr>
    <td>2</td>
    <td>Member</td>
  </tr>
</table>

<h5>User-Group-Role Map</h5>

<table>
  <tr>
    <th>Int user_id</th>
    <th>Int group_id</th>
    <th>Int role_id</th>
  </tr>
  <tr>
    <td>1</td>
    <td>1</td>
    <td>1</td>
  </tr>
  <tr>
    <td>2</td>
    <td>1</td>
    <td>2</td>
  </tr>
  <tr>
    <td>3</td>
    <td>3</td>
    <td>1</td>
  </tr>
  <tr>
    <td>1</td>
    <td>3</td>
    <td>2</td>
  </tr>
  <tr>
    <td>4</td>
    <td>2</td>
    <td>1</td>
  </tr>
</table>

<h1>Basic Functions</h1>

<div class="not-implemented"><code>$user.oldest_updated</code></div>

<p>Returns the last time the Relation was updated; since we're interested in the data updates, on non-table Relations,
this will defer to the data in the underlying tables.  </p>

<h2>Columns (Fields)/Associative</h2>

<p>In Raku, Relation does the <a href="https://docs.raku.org/type/Associative">Associative</a> (hash array) role 
to access Fields (columns).  For more information, see <a href="https://docs.raku.org/language/hashmap">Hashes and maps</a>.</p>
<p>That means all of the following are possible:</p>

<div class="not-implemented"><code class="block">
$surname-field = $user&lt;surname&gt;;              # Fetch a relation column with a hardcoded name
$field = $user{$column-name};                 # Fetch a relation column with the name in a variable

$surname = $user&lt;surname&gt;[$row-number];       # Fetch cell contents by column, then row
$user&lt;surname&gt;[$row-number] = $value;         # Set cell contents by column, then row

$user.elems :column;                          # Count columns in $user relation
</code></div>

<h3>DataDictionary</h3>

<div class="not-implemented"><code>$user.dictionary(fields => [...])</code></div>

<p>Returns the structure entry, probably from the Data Dictionary (though not necessarily in the case of a 
TupleSet).  </p>

<h2>Rows (Tuples)/Positional (&amp; Iterator)</h2>

<p>In Raku, Relation does the Positional (array) role to access Tuples (rows).  For more information, see:
<a href="https://docs.raku.org/language/list">Lists, sequences, and arrays</a></p>

<p>That means all of the following are possible:</p>

<div class="not-implemented"><code class="block">
$row = $user[$rownum];                         # Get a row from a relation

for $user { .... }                             # Iterate over the rows in a relation

$surname = $user[$row-number]&lt;surname&gt;;        # Get cell contents by row, then column
$user[$row-number]&lt;surname&gt; = $surname;        # Set cell contents by row, then column

$user.elems;                                   # Count rows (users) in relation $user
$relation = Empty;                             # Remove all users
</code></div>

<h3>Upserts</h3>

<p>This is equivalent to SQL INSERT/UPDATE.  The syntax is essentially the same for both.  </p>

<div class="not-implemented">
<code class="block">
# Option 1
upsert $user, 
  values => \(                                # Set values for some fields using a capture 
    id => $value,
    given_name => $given_name,
    surname => $surname,
  ),
  conflict => &lt;id&gt;,                           # If there's a conflict on ID
  where => {                                  # Do an update where these conditions are true
    id => $value,
  };

# Option 2
$user.upsert:
  :values(\(                                  # Set values for some fields using a capture
    :id($value)
    :given_name($given_name),
    :surname($surname)
  )),
  :conflict(&lt;id&gt;),                           # If there's a conflict on ID
  :where({                                   # Do an update where these conditions are true
    :id($value),
  });
</code></div>

<p>If some fields are not specified for the above, then it will attempt to use the default values; if none
are available, then it will return an error and not push.  </p>

<p>An Enum with the single value <code>Default</code> is defined.  If passed in as a value, it indicates that that value should 
be the Default value.  </p>

<p>If there's a conflict, an exception is thrown; if the <code>conflict</code> parameter is passed, and the conflict is
on one of the columns, then the items in the <code>where</code> clause are used to match existing records, and update 
them.  </p>

<p>If the <code>where</code> clause is specified without a <code>conflict</code> clause, then an update is done instead
of an insert.  </p>

<p>There will be a :refetch adverb that specifies that upsert is to return the values upserted; this will include
defaults.  </p>

<p>The :exists paramter will be an enum with the possible values, with the nearest SQL command:</p>
<ul>
  <li><b>MayExist:</b> INSERT ON CONFLICT DO UPDATE.  This is the default.  </li>
  <li><b>MustExist:</b> UPDATE</li>
  <li><b>MustNotExist:</b> INSERT</li>
</ul>

<h3>Selects</h3>

<p>This is equivalent to a few of the clauses from SQL SELECT, but the selecting language is quite a bit like 
XPath, though with some changes.  To get the equivalent of a full SQL select, see the Usage section, below.  </p>

<div class="not-implemented">
<code class="block">
# Set up a join for later use
$user-group-join = Join.new('user-group-join', $user ⟕ $user-group ⟕ $group, [
    -> $user, $user-group {
      $user.id eq $user-group.user_id
    },
    -> $user-group, $group {
      $user-group.group_id eq $group.id
    },
]);

# Make this the default join for $user joining to $group; would normally do it both ways
$user.default_join($group, $user-group-join);

# Do an actual select
select q:to/END/;
  $user[id = $value and given_name ~ "fred"]/(@id, @given_name, @surname AS last_name) 
    ▵ $group/*
END
</code>
</div>

<p>This will return a TupleSet.</p>

<p>The <code>select</code> function attached to a Relation is just a simple select; it can use a 
predefined <code>Join</code>, and allows for some simple selecting mechanisims.  To get the equivalent 
of a full SQL select, you'd need to add some other functions.  </p>

<p>We need to make sure this also does perspectives.</p>

<h3>method cursor(--> Cursor)</h3>

<p>Returns a <a href="Raku-TOP/Cursor.xml">Cursor</a> on the current relation.  </p>

<h3>method used_by(Cursor --> Bool)</h3>

<p>If the specified cursor is defined directly on the current relation, returns true.  </p>

<h3>method locks(--> Array)</h3>

<p>Returns a list of the locked records on the relation.  If empty, there are no locked records.  </p>

<h2>Aggregator Functions</h2>

<p>For more information, see the <a href="Raku-TOP/Field.xml">Aggregate Functions section of Field</a>.  </p>

<h3>method group(Array[Str] @grouping, &amp;aggregating-function)</h3>

<p>For $aggregating-function parameter, cf. raku <code>sort</code> to see the kind of return values the 
function could have.  Should take care of everything in the SQL SELECT clause <code>GROUP BY</code>.  
Has a standalone version as well, for use in feed pipelines.  </p>
    
<p>To do this properly, we need to implement aggregate functions in Raku; from our POV, these are functions that,
while being named as though they were aggregate functions (eg. <code>sum</code>), they actually are put in a loop 
and run once per loop iteration.  </p>

The following is some thoughts on what the code for .group could look like:

<code class="block">
method group(Array[Str] @grouping, &amp;aggregating-function) {
  # Create $group-cursor as Cursor/Supply
  $this.milieu = &amp;aggregating-function(Nil, Nil);
  for $group-cursor -> $current-record {
    $group = fetch_group($current-record);
    &amp;aggregating-function($current-record, $group);
  }
  for %groups -> $group-id, $group {
    &amp;aggregating-function(Nil, $group);
  }
  
  return \%groups;
}

sub aggregating-function($current-record, $group)

# ==> group(&lt;.id&gt;, { .groupnames = .groupname.join',' }, ) 
# In the code above, join is an aggregate function on the .groupname field
</code>

<h3>method window(Array[Str] @grouping, &amp;aggregating-function)</h3>

<p>Does the same as an SQL SELECT ... WINDOW clause; cf.
https://www.postgresqltutorial.com/postgresql-window-function/
and 
https://www.postgresql.org/docs/current/sql-select.html
</p>

<p>Essentially does the same thing as <code>.group()</code>, but we need to do a second pass to 
push those values back into the rows.  Unless we're 
binding them in memory instead of saving them to disk; we could probably bind them all to the one value.  </p>

<h1>Usage</h1>

<h2>SQL-style select</h2>

<p>As an example, say we wanted to do the following using our previously defined join:</p>

<code>
SELECT
  user.id,
  given_name,
  surname AS last_name
  CONCAT_WS(', ', group_name) AS group_names
FROM
  user
  JOIN user_group
    ON user.id = user_group.user_id
  JOIN group
    ON user_group.group_id = group.id
WHERE REGEXP(user.given_name, '^Jo')
GROUP BY user.id
HAVING groupname = 'Widgets'
ORDER BY last_name, given_name
</code>

<p>...then we'd do something like this:</p>

<div class="not-implemented"><code class="block">
$user.select('*[id = $value and given_name ~ "^Jo"]/(@id, @given_name, @surname AS last_name)') 
▵ $group.select('*')
==> group(&lt;.id&gt;, { .groupnames = join(',', .groupname) }, ) 
==> grep {.groupname eq 'Staff'}
==> sort({.surname, .firstname});
</code></div>

<p>Note that the ordering above is derived from the following.  </p>

<h5>Select Stages</h5>

<table>
  <tr>
    <th>Order</th>
    <th>Stage (SQL)</th>
    <th>Stage Type</th>
    <th>Raku TOP</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>1</td>
    <td>FROM</td>
    <td>Join</td>
    <td>Join operators, etc</td>
    <td>Choose and join tables (Relations => Base query creation)</td>
  </tr>
  <tr>
    <td>2</td>
    <td>WHERE</td>
    <td>Filter</td>
    <td><code>select</code> or <code>grep</code></td>
    <td>Filters the base data</td>
  </tr>
  <tr>
    <td>3</td>
    <td>GROUP BY</td>
    <td>Aggregate</td>
    <td><code>group</code></td>
    <td>Aggregates the base data (Base query => Aggregate query)</td>
  </tr>
  <tr>
    <td>4</td>
    <td>HAVING</td>
    <td>Filter</td>
    <td><code>grep</code></td>
    <td>Filters the aggregated data</td>
  </tr>
  <tr>
    <td>5</td>
    <td>SELECT</td>
    <td>Evaluate</td>
    <td><code>map</code></td>
    <td>Evaluate selected fields</td>
  </tr>
  <tr>
    <td>6</td>
    <td>DISTINCT</td>
    <td>Filter</td>
    <td><code>unique</code></td>
    <td>Removes duplicates</td>
  </tr>
  <tr>
    <td>7</td>
    <td>ORDER BY</td>
    <td>Sort</td>
    <td><code>sort</code></td>
    <td>Sorts the final data</td>
  </tr>
  <tr>
    <td>8</td>
    <td>LIMIT</td>
    <td>Filter</td>
    <td><code>head</code></td>
    <td>Limits the returned data to a row count</td>
  </tr>
</table>

<ul>
  <li><b>select:</b> Until select is implemented, we will just use one of the other row selection techniques,
    such as grep.  </li>
  <li><b>group:</b> cf. classify and maybe categorize on https://docs.raku.org/type/List#routine_categorize 
    (not the same, but could be helpful).  Also reduce, on the same page, of course.  And sum.  Still
    not sure how to handle aggregate functions gracefully.  </li>
  <li><b>grep, map, unique, sort, head:</b> See Raku's <a href="https://docs.raku.org/type/List">List</a> class</li>
</ul>

<p>Not sure exactly when window happens, but it's after "grouping and aggregation".  </p>

<h2>Data Transfer/Export/Import</h2>

<p>To move data from eg. a view into a table, it should be possible to do the following:</p>

<div class="not-implemented"><code class="block">
$table = Table.new($view.dictionary());
$view.select('*') ==> $table;
</code></div>

<p>To get import/export functionality, just make one of the tables your desired format, eg. CSV</p>

</content>
</page>