<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../interface.xsl"?>
<page>
<filename>TOP/Collection-Convergence/Database-Engine-Neutrality.xml</filename>
<content>
<div class="blockquote">
	<p>TOP does not propose or expect any particular file format or physical 
		table grouping. The source or storage technique of tables should be 
		assumed to take on many different forms. TOP should be able to access 
		and produce the common table formats in use.</p>
<div class="reference">
        <i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<p>Collections have a right to...</p>

<div class="blockquote">

<h2>Multi-Sized Table Access</h2>

<p>This is the ability to use or connect to a wide range and/or variety of table 
sizes and engines, not just a formal SQL engine or just a pinkie-sized array. 
Many languages and environments seem to focus either too much attention on 
large, formal collections (SQL Tables), or smaller memory-bound structures like 
lists or arrays. Few dare to span both ends AND cover the often-ignored middle 
well.</p>

<div class="reference">
        <i><a href="https://web.archive.org/web/20121111043922/http://www.geocities.com/tablizer/collrght.htm">Collection Bill of Rights</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>


<h1>Categories of Database Engine</h1>

<p>There are three major categories of table backends 
(implementations/drivers/engines):</p>
<ol>
	<li>RAM Tables</li>
	<li>File-based Tables</li>
	<li>Database Server Tables</li>
</ol>

<h2>RAM Tables</h2>

<p>These reside entirely in memory.  While these are the ideal starting point 
for all collections, TOP has traditionally avoided elevating these types of 
constructs because of their size limitations and lack of automatic persistence.  
To make them useful, add the following feature:</p>

<div class="blockquote">
Lists and array-like structures that can expand beyond memory space. 
		(The language automatically creates and handles temporary file buffering 
		if needed).  This is a contrast to constructs like Java VECTORs that 
		have a limit in size and quantity (related to memory constraints).
<div class="reference">
        <i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<p>On a slightly-related note:</p>

<div class="blockquote">
...current implementations of OOP tend to
be much more memory-centric than TOP (collections presumed
to reside fully in memory instead of disk), however, this
appears to be out of tradition rather than an inherent
aspect of OOP.

<div class="reference">
        <i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<p>Note that the quote above observes that OOP doesn't go in for the features 
mentioned in <a href="Collection-Convergence/Database-Engine-Neutrality.html">
Database Engine Neutrality</a>.  </p>

<div class="blockquote">

<p>Using persistent or semi-persistent storage allows easier modularization and 
testing because one does not have to load and run the whole shebang in order to 
test the pieces. This is because TOP applications and components often pass 
information using powerful tables instead of fleeting memory constructs. 
Communications between components can often be via tables. These tables can 
exist without having all parts active in memory. In fact, dummy tables are easy 
to construct for testing. ...  Tables, ... are a snap to inspect during testing 
and troubleshooting.</p>

<div class="reference">
	<i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<p>For a partial explanation of why they're a snap, see 
<a href="RAD/UI-Editors.html#GUI-Editor">GUI Editors</a>.</p>

<h2>File-Based Tables</h2>

<p>These live in files on the file system (whether locally or on a file server).  
Examples would be CSV, HTML tables, JSON, DBF files, and the like.  They can be 
very quick (with memory caching enabled), but allow one to exceed the size of 
the available memory.  The files in question can also be temporary.  This type 
can be subdivided into the following two types:</p>

		<table>
			<tr>
				<th>Name</th>
				<th>Fixed-record</th>
				<th>Variable-record</th>
				<th>Comments</th>
			</tr>
			<tr>
				<th>Record Length</th>
				<td>Fixed</td>
				<td>Variable</td>
				<td></td>
			</tr>
			<tr>
				<th>Reliability</th>
				<td>More</td>
				<td>Less</td>
				<td>Variable has a more complex internal structure</td>
			</tr>
			<tr>
				<th>Flexibility</th>
				<td>Less</td>
				<td>More</td>
				<td></td>
			</tr>
			<tr>
				<th>Compactness</th>
				<td>Less</td>
				<td>More</td>
				<td></td>
			</tr>
			<tr>
				<th>Examples</th>
				<td></td>
				<td>MS-Access</td>
				<td></td>
			</tr>
			<tr>
				<th>Standardisation</th>
				<td>More</td>
				<td>Less</td>
				<td></td>
			</tr>
			<tr>
				<th>Annoying version changes</th>
				<td>Less</td>
				<td>More</td>
				<td></td>
			</tr>
		</table>

<h2>Database Server Tables</h2>

<p>These are tables accessed via a database server (usually SQL, though with the 
rise of NoSQL, that's not guaranteed).  </p>

<div class="blockquote">
The application must go through the DB 
server's access protocols to reach these tables. These types of tables are 
useful for mission-critical transaction processing and very large data 
collections. They are also fairly expensive to setup and manage

<div class="reference">
        <i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<p>... in time, cash, or both.</p>

<h1>Features</h1>

<p>For the non-RAM collections, the following features are desirable.</p>

<div class="blockquote">

<h2>Easy Persistence</h2>

<p>This is the ability to be saved to permanent storage such as disk. It is 
usually related to Virtual Size Caching since the mechanisms are similar.  </p>

<h2>Virtual Size Caching</h2>

<p>If the collection grows beyond available or practical RAM, it should be 
automatically cached on disk or storage such that all the standard operations 
can still be performed regardless of RAM availability. This preferably should be 
automatic and not something that the programmer has to explicitly turn on if RAM 
usage is suspect.</p>


<h2>Active Portion Sharing</h2>

<p>This is the ability to share portions of the collection with other processes 
or users without having to close or suspend access to the entire collection. In 
RDBMS this is usually done via record or segment locking.</p>


<h2>Multiple Permanent [Indices]</h2>

<p>Because there are often frequently requested orderings, such as displaying a 
phone book in name order, there should be a way to avoid having to physically 
re-sort the collection for every similar request or query. This shortcut 
mechanism is called an "index". It is usually a small subset of the original 
data that is kept in an order that facilitates fast retrieval and/or ordering 
information.</p>

<p>Often there needs to be more than one of these per collection or table. For 
example, the phone book application may display ordering by either first name or 
last name.</p>

<div class="reference">
        <i><a href="https://web.archive.org/web/20121111043922/http://www.geocities.com/tablizer/collrght.htm">Collection Bill of Rights</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<h2>Automatic Buffering</h2>

<div class="blockquote">
<p>Automatic control of data buffering during input and changes. The 
		programmer should be able to simply specify whether "optimistic" or 
		"pessimistic" record locking occurs, for example. He or she should not 
		have to create buffer variables and so forth.</p>
<div class="reference">
        <i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<h1>Why Database Engine Neutrality</h1>

<div class="blockquote">
<a name="ceiling"></a>
<h2> No Ceilings!</h2>

<p>Many current approaches to collection processing have practical
ceilings that require arbitrary interface changes to move to
the next step.
When these ceilings are reached, the programmer is
forced to revamp the existing code to take advantage of
the next level of power. Such revamping is a waste of time
and resources. (<a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/meyer1.htm">Bertrand Meyer</a> calls
this the "Continuity Problem", where a small change in the
requirements results in a large change in program code).
<b>It would be like having to steer with your elbow if on
a bicycle, steer with your nose if in a car, and then
steer with your foot if in an 18-wheel rig.</b></p>

<p>Fortunately, the
transportation industry pretty much standardized on 
steering by turning a wheel with one's hands regardless
of the vehicle size or task. (Well,
the bike uses a bar, but close enough). The software
collections industry is not this wise yet. They still
want to <b>divide</b> collections into things like stacks,
queues, sets, dictionaries, trees, etc.; letting
short-lived operational needs drive the protocol chosen.
Collection needs change and grow over time repeatedly
in my experience. Thus, one should pick a flexible
collections protocol. Once a stack always a stack? Nooooo
waaaay. It may continue still acting
as a stack for some operations,
but often will need other views as well.</p>

<p>These ceilings are usually either complexity ceilings
or size ceilings (such as RAM). Let's look at a common Perl
approach and then some SQL problems that tend to be
ceiling bound.</p>

<h3>Perl</h3>

<div class="sidebar">
Note that I have proposed using associative arrays elsewhere
quite a few times. This may seem like a contradiction. However,
those uses are generally an interface mechanism and not
data collection management.
</div>

<p>Perlers often use lists of lists and/or pointers to lists
to store and process collections. Perl "associative
arrays" are basically a RAM table with 2 columns and
one index (to the "key" column).
If the requirements suddenly change, such as
the need for 3 columns, or 2 indexes with persistence, one then
has to completely <b>revamp</b> the way fields and/or indexing
is done. Perlers usually add a second level of complexity
in the form of a list of pointer or a list of lists.
In TOP, or even XBase, these additions would be dirt simple.
There is nothing magic about the limit of 2 columns and
one index, so why does Perl and array-centric
thinking impose this <b>arbitrary limit</b></p>


<p>Although I find pointers to pointers 
nasty and error-prone to work with in almost any form, let
us just assume that this approach is fine in some cases.
However, if the complexity of the structure, the quantity
and variety of operations keeps growing, or the size of such
structures increase beyond a certain amount; then the
typical response is to use a more powerful relational
database add-in.
Aside from the fact that database API's can be bureaucratic to work
with, one has to <b>convert</b> the native pointer structure and much
of its processing into something the DB API's can use.</p>

<p>
Thus, there are roughly 3 different kinds of interfaces
one has to use as a collection graduates from simple to middle-level to
complex:</p>
<ol>
<li> A regular or associative array.</li>
<li> An array of arrays (or a list of pointers) if
     the structure grows beyond 2 columns or 1 index.
     (A "doubling-up," if you will).</li>
<li> Relational API's when heavy persistence, concurrency,
     or size is needed.</li>
</ol>
<p>
I see no reason why the same basic interface cannot be used
from baby collections to Oracle-size collections. Why
the industry tolerates this, I have no idea. Perhaps because
they have not seen collections done right.</p>
<p>
Note that there may
be some minor setting differences as collections
scale. For example, transaction markers and concurrency
error handling may need to be specified for the
higher-end collections. However, these can be treated
as <b>additions</b> to the existing code, <b>not overhauls</b>.</p>

<h3>SQL</h3>
<p>
Now let's look at traditional SQL operations. SQL is
usually fine for fairly simple processing stuff. However, as the
number of expressions, links (joins), and/or fields
increase; SQL can get nasty at times. Standard SQL lacks many
block-box (subroutines) and reference reduction (factoring)
techniques found in most programming
languages (and promoted as "a good practice").
In standard SQL you usually cannot assign variables,
macros, subroutines, etc. to complex or repeating parts
in order to break the logic and sequence down into
<b>more manageable parts</b>. You simply end up with one big, messy
string with lots of parenthesis. Beyond a certain
complexity point one has to break the statement into
2 or more separate SQL statements.</p>
<p>
Further, if set-oriented operations are no longer
sufficient to handle the complexity of the job,
the <b>entire</b> SQL statement has to be
<b>converted</b> into a cursor-oriented approach
that deals better with one record at a time. It is like
having to stop, backup for several miles, and then
start again on a different path.
(See <a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/sqlcrit.htm">SQL Criticism</a>).</p>

<p>
TOP offers several techniques to avoid or reduce overhauls
from complexity and size changes. The primary technique
is the provision of a built-in set of standard, common,
rudimentary, yet powerful collection operations
(described above). Other techniques include
<a href="Stylistic-Features/Control-Tables/#sql_eval">
internal-aware expression evaluation</a> 
and the blurring of set-orientation versus cursor-orientation
in database commands. (Set-oriented operations have
some significant advantages in traditional client/server
setups, however, one should have a choice, especially
if the bandwidth between the client and the server is
sufficient).</p>

<p>
"Complexity Scaling" can also be horizontal as well
as vertical. For example, an API that is dedicated
to a stack collection can get cumbersome if the needs
grow outside of the traditional parameters of stacks.
I encounter the need to use and view stacks, trees,
queues, etc. in ways outside of these narrow collection
"subtypes" all the time. Requirements change and
your collections interface should be <b>ready</b> for such
<b>changes</b>.</p>

<div class="reference">
        <i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>
</content>
</page>