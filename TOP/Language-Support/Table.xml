<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../interface.xsl"?>
<page>
<filename>TOP/Language-Support/Table.xml</filename>
<content>
<h3> Definition of "Table" </h3>

<div class="blockquote">

<p>I define a relational table as a collection of "rows". Rows are basically 
[associative arrays] with field names and corresponding values. Rows have 
"potential" fields. (I prefer "field" over "column" because column implies fixed 
field widths, which is not a prerequisite for "table"). "Potential field" means 
that a row does not have to actually contain a given field or even a placeholder 
for it.</p>

<p>Potential fields are kept in a central list [the 
<a href="file:///home/wayland/src/TOP/TOP-doco/generated/Collection-Convergence/Data-Dictionaries.html">
Data Dictionary</a>], meaning that each row does not necessarily have to know of 
the entire potential field list. If a request is made for a field that is in the 
potential list, but that the row does not actually contain, then a blank or 
empty value is returned. (If a row contains a field name that is not in the 
central list, that field it is not considered part of the table).</p>

<p>
Tables also potentially have multiple temporary and multiple
permanent indexes. Indexes allow one to find specific rows or
row sets without sequential traversal of the entire table.</p>
<p>
Note that there is <b>no</b> necessary size or content
restriction on the fields. "Types" or length limits are
not a prerequisite. In fact, such restrictions can make
certain operations harder to implement. However, in practice,
such limits are often imposed on a product for performance reasons
or to fit a given standard, such as SQL.</p>
<p>
Another way to identify or define "tables" is by their
<a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/collrght.htm">operations</a> rather than structure.</p>

<div class="reference">
        <i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>


<h3>Miscellanous Table Features</h3>

<div class="blockquote">
<ul>
	<li>Because tables may come from many different sources, TOP should provide 
		a way to query to see which features are available. For example, there 
		should be a way to query a table source to see if the query limit 
		feature (FIX: described above) is available on a given table.</li>
	<li>ITOP should be able to generate temporary tables that automaticaly last 
		only as long as the program is running or until explicitly closed. These 
		tables should have a unique identity (automatically generated) to avoid 
		multi-user conflicts.</li>
	<li>Easy way to make a memory or temporary version or copy of a record, and 
		then be able to load this to and from a multi-record table when 
		needed.</li>
	<li>TOP should have the ability to evaluate internal-aware expression 
		strings, similar to the Perl EVAL() function (xbase uses "&amp;").  This 
		allows expressions with internal syntax and function calls (not just 
		SQL) to be stored in tables. This is a very powerful language feature. 
		Note that this is not the same as a general-purpose expression evaluator 
		because we often need a way to call <b>internal</b> functions. (A way to 
		test the validity of the expression should also be provided).</li>
</ul>
<div class="reference">
        <i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>
</content>
</page>