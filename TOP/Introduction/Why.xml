<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../interface.xsl"?>
<page>
<filename>TOP/Introduction/Why.xml</filename>
<content>
<h1>Benefits of Table-Oriented Programming (TOP)</h1>

<p>Have any of the following ever happened to you?  If so, you would have 
benefitted from Table-Oriented Programming</p>

<ul>
	<li>You used a spreadsheet, and thought "I'd like to use a feature from my 
		favourite programming language"?</li> 
	<li>You used a programming language, and thought "This part of the task 
		would be easier if this were a spreadsheet"?  </li>
	<li>You wanted to add a new piece of data to your program, and had to 
		significantly refactor</li>
	<li>You wanted to change the data storage of your program (eg. between 
		in-memory and a database server), and you had to significantly 
		refactor</li>
</ul>

<h1>Multi-paradigm Programming</h1>

<p>Each programming paradigm is a tool in your toolbox.  The more paradigms a 
programming language allows for, the more tools you have in your toolbox.  
Each paradigm not available is one less tool in your toolbox.  </p>

<p>With this in mind, the best way to get the benefits of table-oriented 
programming (TOP) is not to use a TOP programming language, but to integrate TOP 
into a language which is already multi-paradigm.  My personal preference is 
Raku (see <a href="Other-Items/Paradigm-Comparisons.html">Paradigm 
Comparisons</a> for more information).  </p>

<p>In short, most programming deals with tables at some point, and the 
approaches most other programming languages take to tables are fairly clunky, 
and this shows a way to improve that.  </p>

<h1 id="Refactoring">Refactoring Simplicity</h1>

<p>One of the main goals of Table-Oriented Programming (TOP), much like any 
other code-organising paradigm (eg. OOP)  is to reduce the need for refactoring.  
TOP has some specific kinds of refactoring in mind that it wants to reduce.  
</p>

<p>When thinking about these things, it helps to have an example.  Many 
programmers who have organically built an application have had an experience 
where they started with an array of scalars, and then it turned into an array 
of associative arrays, and then realise it should be in an SQL database.  As our 
alternative, we should imagine that we started with a lightweight TOP table, instead of 
an array (because that's what we always do in TOP).</p>

<p>Back to the kinds of refactoring we want to reduce.  These are both 
<b>collection refactoring</b>, namely:</p>

<ul>
	<li><b>Structural Change:</b> when we need to change the structure of our 
		collection</li> 
	<li><b>Scaling:</b> when we need to scale the collection</li>
</ul>

<div class="blockquote">
TOP does not value hierarchies as highly ... because they are seen as too 
inflexible to change. Changes often do not occur in a hierarchical way.

<div class="reference">
        <i><a href="https://web.archive.org/web/20121024051826/http://www.geocities.com/tablizer/top.htm">Table-Oriented Programming</a></i>, Tablizer/TOPMind, 1998-2002
</div>
</div>

<h2>Collection Structure Change Refactoring</h2>

<p>This is when we need to change the structure of our collection (often by 
adding new kinds of data our current taxonomy doesn't allow for); in our example 
above, instead of turning from an array to an array of associative arrays, we 
would just add more columns to our existing table.</p>

<h2>Collection Scaling Refactoring</h2>

<p>The goal here is that, when your collection needs to scale, you just 
substitute a new backend, and barely change your code at all.  This is what 
<a href="Concepts/Database-Engine-Neutrality.html">Database Engine Neutrality</a> 
is all about.  In our example above, when we want to change from our structures 
in memory to using an SQL database, we just change the backend of the table, and 
carry on.  Need to switch to a replicating setup?  Just change backends again.  
Or maybe use the same one, but reconfigure it when it's initialised.  The only 
question is, who makes all these backends?  </p>

<h1>Summary</h1>

<p>Modern TOP is not an all-encompassing paradigm.  Having said that, it would 
certainly be useful to put many kinds of data into it.  </p>

</content>
</page>